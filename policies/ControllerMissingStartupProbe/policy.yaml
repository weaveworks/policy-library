apiVersion: pac.weave.works/v2beta1
kind: Policy
metadata:
  name: weave.policies.containers-missing-startup-probe
spec:
  id: weave.policies.containers-missing-startup-probe
  name: Containers Missing Startup Probe
  enabled: false
  description: "This Policy detects whether or not a startupProbe has been set for containers. Containers probes are:\n\n### liveness \nThe kubelet uses liveness probes to know when to restart a container. For example, liveness probes could catch a deadlock, where an application is running, but unable to make progress. Restarting a container in such a state can help to make the application more available despite bugs.\n\n### readiness\nThe kubelet uses readiness probes to know when a container is ready to start accepting traffic. A Pod is considered ready when all of its containers are ready. One use of this signal is to control which Pods are used as backends for Services. When a Pod is not ready, it is removed from Service load balancers.\n\n### startup\nThe kubelet uses startup probes to know when a container application has started. If such a probe is configured, it disables liveness and readiness checks until it succeeds, making sure those probes don't interfere with the application startup. This can be used to adopt liveness checks on slow starting containers, avoiding them getting killed by the kubelet before they are up and running.\n"
  how_to_solve: "Check your entities to see if a probe has been set. \n```\n...\n  spec:\n    containers:\n    - startupProbe:\n      ...\n```\nhttps://kubernetes.io/docs/tasks/configure-pod-container/configure-liveness-readiness-startup-probes/\n"
  category: weave.categories.reliability
  severity: medium
  targets: {kinds: [Deployment, Job, ReplicationController, ReplicaSet, DaemonSet, StatefulSet, CronJob]}
  tags: []
  parameters:
    - name: exclude_namespaces
      type: array
      required: false
      value:
    - name: exclude_label_key
      type: string
      required: false
      value:
    - name: exclude_label_value
      type: string
      required: false
      value:
  code: "package weave.advisor.observability.startup_probe\n\nimport future.keywords.in\n\nexclude_namespaces := input.parameters.exclude_namespaces\nexclude_label_key := input.parameters.exclude_label_key\nexclude_label_value := input.parameters.exclude_label_value\n\nviolation[result] {\n  isExcludedNamespace == false\n  not exclude_label_value == controller_input.metadata.labels[exclude_label_key]\n  probe := \"startupProbe\"\n  some i\n  containers := controller_spec.containers[i]\n  not containers[probe]\n  result = {\n\t\t\"issue detected\": true,\n    \"msg\": sprintf(\"%v has not been set\", [probe]),\n    \"violating_key\": sprintf(\"spec.template.spec.containers[%v]\", [i])  \n\t}\n}\n\n# Controller input\ncontroller_input = input.review.object\n\n# controller_container acts as an iterator to get containers from the template\ncontroller_spec = controller_input.spec.template.spec {\n  contains_kind(controller_input.kind, {\"StatefulSet\" , \"DaemonSet\", \"Deployment\", \"Job\"})\n} else = controller_input.spec {\n  controller_input.kind == \"Pod\"\n} else = controller_input.spec.jobTemplate.spec.template.spec {\n  controller_input.kind == \"CronJob\"\n}\n\ncontains_kind(kind, kinds) {\n  kinds[_] = kind\n}\n\nisExcludedNamespace = true {\n\tcontroller_input.metadata.namespace\n\tcontroller_input.metadata.namespace in exclude_namespaces\n} else = false\n"
