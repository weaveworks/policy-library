apiVersion: pac.weave.works/v2beta1
kind: Policy
metadata:
  name: weave.policies.services-prohibit-ports-range
spec:
  id: weave.policies.services-prohibit-ports-range
  name: Services Prohibit Ports Range
  enabled: false
  description: "This Policy checks if ports allocated for your services are using a number that is less than the specified value. \n"
  how_to_solve: "Use a port that is greater than or equal to what is specified in the Policy. \n```\nspec:\n  ports:\n    - targetPort: <target_port>\n```\n"
  category: weave.categories.network-security
  severity: high
  targets: {kinds: [Service]}
  standards:
    - id: weave.standards.pci-dss
      controls:
        - weave.controls.pci-dss.1.1.6
        - weave.controls.pci-dss.1.3.1
        - weave.controls.pci-dss.2.2.2
  tags: [pci-dss]
  parameters:
    - name: target_port
      type: integer
      required: true
      value: 1024
    - name: exclude_namespaces
      type: array
      required: false
      value:
    - name: exclude_label_key
      type: string
      required: false
      value:
    - name: exclude_label_value
      type: string
      required: false
      value:
  code: |
    package weave.advisor.services.block_ports

    import future.keywords.in

    target_port := input.parameters.target_port
    exclude_namespaces := input.parameters.exclude_namespaces
    exclude_label_key := input.parameters.exclude_label_key
    exclude_label_value := input.parameters.exclude_label_value

    violation[result] {
      isExcludedNamespace == false
      not exclude_label_value == controller_input.metadata.labels[exclude_label_key]
      some i
      spec_port := service_spec.ports[i]
      service_port := spec_port.targetPort
      not service_port > target_port
      result = {
        "issue detected": true,
        "msg": sprintf("targetPort is not greater than '%v'; found %v", [target_port, service_port]),
        "violating_key": sprintf("spec.ports[%v].targetPort", [i])
      }
    }

    # Controller input
    controller_input = input.review.object

    service_spec = controller_input.spec {
      contains_kind(controller_input.kind, {"Service"})
    }

    contains_kind(kind, kinds) {
      kinds[_] = kind
    }

    isExcludedNamespace = true {
    	controller_input.metadata.namespace
    	controller_input.metadata.namespace in exclude_namespaces
    } else = false
