apiVersion: pac.weave.works/v2beta1
kind: Policy
metadata:
  name: weave.policies.postgres-enforce-initdb-waldir-env-var
spec:
  id: weave.policies.postgres-enforce-initdb-waldir-env-var
  name: Postgres Enforce Environment Variable - POSTGRES_INITDB_WALDIR
  enabled: false
  description: "This Policy ensures POSTGRES_INITDB_WALDIR environment variable are in place when using the official container images from Docker Hub.\nPOSTGRES_INITDB_WALDIR: The POSTGRES_INITDB_WALDIR environment variable is used to define another location for the Postgres transaction log. By default the transaction log is stored in a subdirectory of the main Postgres data folder (PGDATA). \n"
  how_to_solve: |
    If you encounter a violation, ensure the POSTGRES_INITDB_WALDIR environment variables is set.
    For futher information about the Postgres Docker container, check here: https://hub.docker.com/_/postgres
  category: weave.categories.organizational-standards
  severity: high
  targets: {kinds: [Deployment, Job, ReplicationController, ReplicaSet, DaemonSet, StatefulSet, CronJob]}
  parameters:
    - name: exclude_namespaces
      type: array
      required: false
      value:
    - name: exclude_label_key
      type: string
      required: false
      value:
    - name: exclude_label_value
      type: string
      required: false
      value:
  code: |
    package weave.advisor.postgres.enforce_initdb_waldir_env_var

    import future.keywords.in

    env_name = "POSTGRES_INITDB_WALDIR"
    app_name = "postgres"
    exclude_namespaces := input.parameters.exclude_namespaces
    exclude_label_key := input.parameters.exclude_label_key
    exclude_label_value := input.parameters.exclude_label_value

    violation[result] {
      isExcludedNamespace == false
      not exclude_label_value == controller_input.metadata.labels[exclude_label_key]
      some i
      containers := controller_spec.containers[i]
      contains(containers.image, app_name)
      not containers.env
      result = {
        "issue detected": true,
        "msg": "environment variables needs to be set",
        "violating_key": sprintf("spec.template.spec.containers[%v]", [i]),  }
    }

    violation[result] {
      isExcludedNamespace == false
      not exclude_label_value == controller_input.metadata.labels[exclude_label_key]
      some i
      containers := controller_spec.containers[i]
      contains(containers.image, app_name)
      envs := containers.env
      not array_contains(envs, env_name)
      result = {
        "issue detected": true,
        "msg": sprintf("'%v' is missing'; detected '%v'", [env_name, envs]),
        "violating_key": sprintf("spec.template.spec.containers[%v].env.name", [i])
      }
    }


    array_contains(array, element) {
      array[_].name = element
    }

    # Controller input
    controller_input = input.review.object

    # controller_container acts as an iterator to get containers from the template
    controller_spec = controller_input.spec.template.spec {
      contains_kind(controller_input.kind, {"StatefulSet" , "DaemonSet", "Deployment", "Job"})
    } else = controller_input.spec {
      controller_input.kind == "Pod"
    } else = controller_input.spec.jobTemplate.spec.template.spec {
      controller_input.kind == "CronJob"
    }

    contains_kind(kind, kinds) {
      kinds[_] = kind
    }

    isExcludedNamespace = true {
    	controller_input.metadata.namespace
    	controller_input.metadata.namespace in exclude_namespaces
    } else = false
