apiVersion: pac.weave.works/v2beta1
kind: Policy
metadata:
  name: weave.policies.services-restrict-protocols
spec:
  id: weave.policies.services-restrict-protocols
  name: Services Restrict Protocols
  enabled: false
  description: "This Policy specifies what protocols should set for your Service. Any protocol not listed in this Policy will be in violation. \n"
  how_to_solve: "Use a protocol that is specified in the Policy. \n```\nspec:\n  ports:\n    - protocol: <protocols>\n```\n"
  category: weave.categories.network-security
  severity: high
  targets: {kinds: [Service]}
  standards:
    - id: weave.standards.pci-dss
      controls:
        - weave.controls.pci-dss.1.1.6
        - weave.controls.pci-dss.1.3.1
    - id: weave.standards.soc2-type-i
      controls:
        - weave.controls.soc2-type-i.1.6.7
  tags: [pci-dss, soc2-type1]
  parameters:
    - name: protocols
      type: string
      required: true
      value: HTTPS
    - name: exclude_namespaces
      type: array
      required: false
      value:
    - name: exclude_label_key
      type: string
      required: false
      value:
    - name: exclude_label_value
      type: string
      required: false
      value:
  code: |
    package weave.advisor.services.block_protocols

    import future.keywords.in

    service_protocol := input.parameters.protocols
    exclude_namespaces := input.parameters.exclude_namespaces
    exclude_label_key := input.parameters.exclude_label_key
    exclude_label_value := input.parameters.exclude_label_value

    violation[result] {
      isExcludedNamespace == false
      not exclude_label_value == controller_input.metadata.labels[exclude_label_key]
      some i
      ports := service_spec.ports[i]
      existing_protocol := ports.protocol
      not service_protocol == existing_protocol
      result = {
        "issue detected": true,
        "msg": sprintf("Protocol should be '%v'; found '%v'", [service_protocol, existing_protocol]),
        "violating_key": sprintf("spec.ports[%v].protocol", [i]),
        "recommended_value": service_protocol
      }
    }

    # Controller input
    controller_input = input.review.object

    service_spec = controller_input.spec {
      contains_kind(controller_input.kind, {"Service"})
    }

    contains_kind(kind, kinds) {
      kinds[_] = kind
    }

    isExcludedNamespace = true {
    	controller_input.metadata.namespace
    	controller_input.metadata.namespace in exclude_namespaces
    } else = false
