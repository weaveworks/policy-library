apiVersion: pac.weave.works/v2beta1
kind: Policy
metadata:
  name: weave.policies.block-all-ingress-traffic
spec:
  id: weave.policies.block-all-ingress-traffic
  name: Block All Ingress Traffic
  enabled: false
  description: "### Block all traffic\nIf you are using a CNI that allows for Network Policies, you can use this Policy to block all Ingress traffic between namespaces. \n\nBy default, if no policies exist in a namespace, then all ingress and egress traffic is allowed to and from pods in that namespace. \n"
  how_to_solve: "Validate your use case and check network policies for traffic blocking. \n\nhttps://kubernetes.io/docs/concepts/services-networking/network-policies/\n"
  category: weave.categories.network-security
  severity: medium
  targets: {kinds: [NetworkPolicy]}
  standards:
    - id: weave.standards.pci-dss
      controls:
        - weave.controls.pci-dss.1.2.1
    - id: weave.standards.nist-800-190
      controls:
        - weave.controls.nist-800-190.3.3.4
    - id: weave.standards.gdpr
      controls:
        - weave.controls.gdpr.25
        - weave.controls.gdpr.32
        - weave.controls.gdpr.24
    - id: weave.standards.soc2-type-i
      controls:
        - weave.controls.soc2-type-i.1.6.1
  tags: [pci-dss, mitre-attack, nist800-190, gdpr, soc2-type1]
  parameters:
    - name: exclude_namespaces
      type: array
      required: false
      value:
    - name: exclude_label_key
      type: string
      required: false
      value:
    - name: exclude_label_value
      type: string
      required: false
      value:
  code: |
    package weave.advisor.network.block_ingress_traffic

    import future.keywords.in

    policy_type := "Ingress"
    exclude_namespaces := input.parameters.exclude_namespaces
    exclude_label_key := input.parameters.exclude_label_key
    exclude_label_value := input.parameters.exclude_label_value

    violation[result] {
      isExcludedNamespace == false
      not exclude_label_value == controller_input.metadata.labels[exclude_label_key]
      not np_spec[lower(policy_type)] == []
      result = {
        "issue_detected": true,
        "msg": sprintf("spec.'%v' should be '[]'; %v was detected", [lower(policy_type), np_spec[lower(policy_type)]]),
        "violating_key": "spec"
      }
    }

    violation[result] {
      isExcludedNamespace == false
      not exclude_label_value == controller_input.metadata.labels[exclude_label_key]
      policyTypes := np_spec.policyTypes
      not array_contains(policyTypes, policy_type)
      result = {
        "issue detected": true,
        "msg": sprintf("policyTypes should contain '%v'; found %v", [policy_type, np_spec.policyTypes]),
        "violating_key": "spec.policyTypes"
      }
    }

    array_contains(array, element) {
      array[_] = element
    }

    # Controller input
    controller_input = input.review.object

    np_spec = controller_input.spec {
      contains_kind(controller_input.kind, {"NetworkPolicy"})
    }

    contains_kind(kind, kinds) {
      kinds[_] = kind
    }

    isExcludedNamespace = true {
    	controller_input.metadata.namespace
    	controller_input.metadata.namespace in exclude_namespaces
    } else = false
