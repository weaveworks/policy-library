apiVersion: magalix.com/v1
kind: Policy
metadata:
  name: magalix.policies.containers-minimum-replica-count
spec:
  enable: true
  name: magalix.policies.containers-minimum-replica-count
  description: |
    Use this Policy to to check the replica count of your workloads. The value set in the Policy is greater than or equal to the amount desired, so if the replica count is lower than what is specified, the Policy will be in violation. 
  how_to_solve: |
    The replica count should be a value equal or greater than what is set in the Policy.
    ```
    spec:
      replicas: <replica_count>
    ```
    https://kubernetes.io/docs/concepts/workloads/controllers/deployment/#scaling-a-deployment
  category: magalix.categories.reliability
  severity: medium
  targets: {kind: [Deployment, ReplicationController, ReplicaSet, StatefulSet]}
  controls:
  - magalix.controls.soc2-type-1.2.1.1
  tags: [soc2-type1]
  parameters:
  - name: replica_count
    type: integer
    required: true
    default: 2
  - name: exclude_namespace
    type: string
    required: false
    default:
  - name: exclude_label_key
    type: string
    required: false
    default:
  - name: exclude_label_value
    type: string
    required: false
    default:
  code: "package magalix.advisor.pods.replica_count\n\nreplica_count := input.parameters.replica_count\n\
    exclude_namespace := input.parameters.exclude_namespace\nexclude_label_key :=\
    \ input.parameters.exclude_label_key\nexclude_label_value := input.parameters.exclude_label_value\n\
    \nviolation[result] {\n  not exclude_namespace == controller_input.metadata.namespace\n\
    \  not exclude_label_value == controller_input.metadata.labels[exclude_label_key]\n\
    \  not controller_input.spec.replicas >= replica_count\n  result = {\n    \"issue\
    \ detected\": true,\n    \"msg\": sprintf(\"Replica count must be greater than\
    \ or equal to '%v'; found '%v'.\", [replica_count, controller_input.spec.replicas]),\n\
    \    \"violating_key\": \"spec.replicas\",\n    \"recommended_value\": replica_count\n\
    \  }\n}\n\n\n# Controller input\ncontroller_input = input.review.object\n\n# controller_container\
    \ acts as an iterator to get containers from the template\ncontroller_spec = controller_input.spec.template.spec\
    \ {\n  contains_kind(controller_input.kind, {\"StatefulSet\" , \"DaemonSet\",\
    \ \"Deployment\", \"Job\"})\n} else = controller_input.spec {\n  controller_input.kind\
    \ == \"Pod\"\n} else = controller_input.spec.jobTemplate.spec.template.spec {\n\
    \  controller_input.kind == \"CronJob\"\n}\n\ncontains_kind(kind, kinds) {\n \
    \ kinds[_] = kind\n}\n"
