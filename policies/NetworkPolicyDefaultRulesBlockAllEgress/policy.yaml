apiVersion: magalix.com/v1
kind: Policy
metadata:
  name: magalix.policies.block-all-egress-traffic
spec:
  enable: true
  name: magalix.policies.block-all-egress-traffic
  description: |
    ### Block all traffic
    If you are using a CNI that allows for Network Policies, you can use this Policy to block all Ingress or Egress traffic between namespaces. 

    By default, if no policies exist in a namespace, then all ingress and egress traffic is allowed to and from pods in that namespace. 
  how_to_solve: |
    Validate your use case and check network policies for traffic blocking. 

    https://kubernetes.io/docs/concepts/services-networking/network-policies/
  category: magalix.categories.network-security
  severity: medium
  targets: {kind: [NetworkPolicy]}
  controls:
  - magalix.controls.pci-dss.1.2.1
  - magalix.controls.nist-800-190.3.3.4
  - magalix.controls.gdpr.25
  - magalix.controls.gdpr.32
  - magalix.controls.gdpr.24
  - magalix.controls.soc2-type1.1.6.1
  tags: [pci-dss, mitre-attack, nist800-190, gdpr, soc2-type1]
  parameters:
  - name: policy_type
    type: string
    required: true
    default:
  - name: exclude_namespace
    type: string
    required: false
    default:
  - name: exclude_label_key
    type: string
    required: false
    default:
  - name: exclude_label_value
    type: string
    required: false
    default:
  code: "package magalix.advisor.network.block_traffic\n\npolicy_type := input.parameters.policy_type\n\
    exclude_namespace := input.parameters.exclude_namespace\nexclude_label_key :=\
    \ input.parameters.exclude_label_key\nexclude_label_value := input.parameters.exclude_label_value\n\
    \nviolation[result] {\n  not exclude_namespace == controller_input.metadata.namespace\n\
    \  not exclude_label_value == controller_input.metadata.labels[exclude_label_key]\n\
    \  not np_spec[lower(policy_type)] == []\n  result = {\n    \"issue_detected\"\
    : true,\n    \"msg\": sprintf(\"spec.'%v' should be '[]'; %v was detected\", [lower(policy_type),\
    \ np_spec[lower(policy_type)]]),\n    \"violating_key\": \"spec\"\n  }\n}\n\n\
    violation[result] {\n  not exclude_namespace == controller_input.metadata.namespace\n\
    \  not exclude_label_value == controller_input.metadata.labels[exclude_label_key]\n\
    \  policyTypes := np_spec.policyTypes\n  not array_contains(policyTypes, policy_type)\n\
    \  result = {\n    \"issue detected\": true,\n    \"msg\": sprintf(\"policyTypes\
    \ should contain '%v'; found %v\", [policy_type, np_spec.policyTypes]),\n    \"\
    violating_key\": \"spec.policyTypes\"\n  }\n}\n\narray_contains(array, element)\
    \ {\n  array[_] = element\n}\n\n# Controller input\ncontroller_input = input.review.object\n\
    \nnp_spec = controller_input.spec {\n  contains_kind(controller_input.kind, {\"\
    NetworkPolicy\"})\n}\n\ncontains_kind(kind, kinds) {\n  kinds[_] = kind\n}"
