apiVersion: pac.weave.works/v2beta1
kind: Policy
metadata:
  name: weave.policies.containers-mounting-docker-socket
spec:
  id: weave.policies.containers-mounting-docker-socket
  name: Containers Mounting Docker Socket
  enabled: false
  description: "This Policy checks the mounting of the `docker.sock` socket of the node into the container. The docker socket filename can be altered based on your configuration. The full path is unnecessary as the Policy accounts for any path.  \n"
  how_to_solve: "Ensure workloads aren't mounting the `docker.sock` (or other configured socket name) in order to avoid a violation. \n```\n...\n  spec:\n    template:\n      spec:\n        volumes:\n          - name: docker-sock\n            hostPath:\n              path: \"<path>/<this value>\"\n              type: File\n```\n"
  category: weave.categories.pod-security
  severity: high
  targets: {kinds: [Deployment, Job, ReplicationController, ReplicaSet, DaemonSet, StatefulSet, CronJob]}
  standards:
    - id: weave.standards.nist-800-190
      controls:
        - weave.controls.nist-800-190.4.4.3
    - id: weave.standards.gdpr
      controls:
        - weave.controls.gdpr.25
        - weave.controls.gdpr.32
        - weave.controls.gdpr.24
  tags: [nist800-190, gdpr, default]
  parameters:
    - name: docker_sock
      type: string
      required: true
      value: docker.sock
    - name: exclude_namespaces
      type: array
      required: false
      value:
    - name: exclude_label_key
      type: string
      required: false
      value:
    - name: exclude_label_value
      type: string
      required: false
      value:
  code: "package weave.advisor.podSecurity.deny_docker_socket_mount\n\nimport future.keywords.in\n\ndocker_socket_name := input.parameters.docker_socket\nexclude_namespaces := input.parameters.exclude_namespaces\nexclude_label_key := input.parameters.exclude_label_key\nexclude_label_value := input.parameters.exclude_label_value\n\nviolation[result] {\n  isExcludedNamespace == false\n  not exclude_label_value == controller_input.metadata.labels[exclude_label_key]\n  some i, j\n  sock := controller_spec.containers[i]\n  vmounts := sock.volumeMounts[j]\n  sock_path := vmounts.hostPath.path \n  contains(sock_path, docker_socket_name) \n  result = {\n    \"issue detected\": true,\n    \"msg\": sprintf(\"'%v' is being mounted. The hostPath we found was '%v'\",[docker_socket_name, sock_path]),\n    \"violating_key\": sprintf(\"spec.template.spec.containers[%v].volumeMonuts[%v].hostPath.path\", [i,j])  \n  }\n}\n\n# Controller input\ncontroller_input = input.review.object\n\n# controller_container acts as an iterator to get containers from the template\ncontroller_spec = controller_input.spec.template.spec {\n  contains_kind(controller_input.kind, {\"StatefulSet\" , \"DaemonSet\", \"Deployment\", \"Job\"})\n} else = controller_input.spec {\n  controller_input.kind == \"Pod\"\n} else = controller_input.spec.jobTemplate.spec.template.spec {\n  controller_input.kind == \"CronJob\"\n}\n\ncontains_kind(kind, kinds) {\n  kinds[_] = kind\n}\n\nisExcludedNamespace = true {\n\tcontroller_input.metadata.namespace\n\tcontroller_input.metadata.namespace in exclude_namespaces\n} else = false\n"
