apiVersion: pac.weave.works/v2beta2
kind: Policy
metadata:
  name: weave.policies.kustomization-image-tag-standards
spec:
  id: weave.policies.kustomization-image-tag-standards
  name: Kustomization Image Tag Standards
  enabled: true
  description: "spec.Images must comply with image tag/semver reference standards."
  how_to_solve: "Update the image tag to comply with semver reference standards."
  category: weave.categories.best-practice
  severity: medium
  targets:
    kinds: [Kustomization]
  tags: [flux]
  parameters:
    - name: exclude_namespaces
      type: array
      required: false
      value:
    - name: exclude_label_key
      type: string
      required: false
      value:
    - name: exclude_label_value
      type: string
      required: false
      value:
  code: |
    package weave.advisor.kustomization_image_tag_standards

    import future.keywords.in

    exclude_namespaces := input.parameters.exclude_namespaces
    exclude_label_key := input.parameters.exclude_label_key
    exclude_label_value := input.parameters.exclude_label_value

    violation[result] {
        isExcludedNamespace == false
        image := controller_spec.images[_]
        not valid_image_tag(image.newTag)
        not exclude_label_value == controller_input.metadata.labels[exclude_label_key]
        result = {
            "issue detected": true,
            "msg": sprintf("The Kustomization '%s' spec.images entry for image '%s' must comply with image tag/semver reference standards. Invalid tag: '%s'", [controller_input.metadata.name, image.name, image.newTag]),
            "violating_key": "spec.images"
        }
    }

    valid_image_tag(tag) {
        is_null(tag)
    } else {
        semver.is_valid(tag)
    }

    controller_input = input.review.object

    controller_spec = controller_input.spec {
      controller_input.kind == "Kustomization"
    }

    contains_kind(kind, kinds) {
      kinds[_] = kind
    }

    isExcludedNamespace = true {
      controller_input.metadata.namespace
      controller_input.metadata.namespace in exclude_namespaces
    } else = false
