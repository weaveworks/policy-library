apiVersion: pac.weave.works/v2beta2
kind: Policy
metadata:
  name: weave.policies.helm-chart-reconcile-strategy
spec:
  id: weave.policies.helm-chart-reconcile-strategy
  name: HelmChart Reconcile Strategy
  enabled: true
  description: "The HelmChart reconcile strategy can only specify one of 'revision' or 'chartVersion'."
  how_to_solve: "Set the reconcile strategy to either 'revision' or 'chartVersion' in the HelmChart."
  category: weave.categories.security
  severity: high
  targets:
    kinds:
    - HelmChart
  tags: [flux]
  parameters:
  - name: exclude_namespaces
    type: array
    required: false
    value: ["kube-system"]
  - name: exclude_label_key
    type: string
    required: false
    value:
  - name: exclude_label_value
    type: string
    required: false
    value:
  code: |
    package weave.advisor.helm_chart_reconcile_strategy

    import future.keywords.in

    exclude_namespaces := input.parameters.exclude_namespaces
    exclude_label_key := input.parameters.exclude_label_key
    exclude_label_value := input.parameters.exclude_label_value

    violation[result] {
        isExcludedNamespace == false
        controller_spec.reconcileStrategy != "Revision"
        controller_spec.reconcileStrategy != "ChartVersion"
        not exclude_label_value == controller_input.metadata.labels[exclude_label_key]
        result = {
            "issue detected": true,
            "msg": "The HelmChart reconcile strategy can only specify one of 'revision' or 'chartVersion'",
            "violating_key": "spec.reconcileStrategy"
        }
    }

    # Controller input
    controller_input = input.review.object

    # controller_container acts as an iterator to get containers from the template
    controller_spec = controller_input.spec {
      controller_input.kind == "HelmChart"
    }

    contains_kind(kind, kinds) {
      kinds[_] = kind
    }

    isExcludedNamespace = true {
      controller_input.metadata.namespace
      controller_input.metadata.namespace in exclude_namespaces
    } else = false
