apiVersion: magalix.com/v1
kind: Policy
metadata:
  name: magalix.policies.containers-running-in-privileged-mode
spec:
  id: magalix.policies.containers-running-in-privileged-mode
  name: Containers Running In Privileged Mode
  description: |
    This Policy reports if containers are running in privileged mode. A privileged container is given access to all devices on the host. This allows the container nearly all the same access as processes running on the host.

    By default a container is not allowed to access any devices on the host, but a "privileged" container is given access to all devices on the host. This allows the container nearly all the same access as processes running on the host. This is useful for containers that want to use linux capabilities like manipulating the network stack and accessing devices.
  how_to_solve: |
    Look at the following path to see what the settings are. 
    ```
    ...
      spec:
        containers:
        - securityContext:
            privileged: <privilege>
    ```
    https://kubernetes.io/docs/tasks/configure-pod-container/security-context/
  category: magalix.categories.pod-security
  severity: high
  targets: {kind: [Deployment, Job, ReplicationController, ReplicaSet, DaemonSet,
      StatefulSet, CronJob]}
  controls:
  - magalix.controls.pci-dss.2.2.4
  - magalix.controls.pci-dss.2.2.5
  - magalix.controls.cis-benchmark.5.2.1
  - magalix.controls.mitre-attack.4.1
  - magalix.controls.nist-800-190.3.3.1
  - magalix.controls.gdpr.25
  - magalix.controls.gdpr.32
  - magalix.controls.gdpr.24
  - magalix.controls.soc2-type-1.1.6.1
  tags: [pci-dss, cis-benchmark, mitre-attack, nist800-190, gdpr, soc2-type1, default]
  parameters:
  - name: privilege
    type: boolean
    required: true
    default: false
  - name: exclude_namespace
    type: string
    required: false
    default:
  - name: exclude_label_key
    type: string
    required: false
    default:
  - name: exclude_label_value
    type: string
    required: false
    default:
  code: "package magalix.advisor.podSecurity.privileged\n\n\nexclude_namespace :=\
    \ input.parameters.exclude_namespace\nprivilege := input.parameters.privilege\n\
    exclude_label_key := input.parameters.exclude_label_key\nexclude_label_value :=\
    \ input.parameters.exclude_label_value\n\nviolation[result] {\n  some i\n  isExcludedNamespace\
    \ == false\n  not exclude_namespace == controller_input.metadata.namespace\n \
    \ not exclude_label_value == controller_input.metadata.labels[exclude_label_key]\n\
    \  container := controller_spec.containers[i]\n  security_context_priv := container.securityContext.privileged\n\
    \  not security_context_priv == privilege\n  result = {\n    \"issue detected\"\
    : true,\n    \"msg\": sprintf(\"Container should set privileged to '%v'; detected\
    \ '%v'\", [privilege, security_context_priv]),\n    \"violating_key\": sprintf(\"\
    spec.template.spec.containers[%v].securityContext.privileged\", [i]),\n    \"\
    recommended_value\": privilege\n  }\n}\n\nisExcludedNamespace  = true {\n  input.review.object.metadata.namespace\
    \ == exclude_namespace\n}else = false {true}\n\n\nis_array_contains(array,str)\
    \ {\n  array[_] = str\n}\n\n# Controller input\ncontroller_input = input.review.object\n\
    \n# controller_container acts as an iterator to get containers from the template\n\
    controller_spec = controller_input.spec.template.spec {\n  contains_kind(controller_input.kind,\
    \ {\"StatefulSet\" , \"DaemonSet\", \"Deployment\", \"Job\"})\n} else = controller_input.spec\
    \ {\n  controller_input.kind == \"Pod\"\n} else = controller_input.spec.jobTemplate.spec.template.spec\
    \ {\n  controller_input.kind == \"CronJob\"\n}\n\ncontains_kind(kind, kinds) {\n\
    \  kinds[_] = kind\n}\n"
