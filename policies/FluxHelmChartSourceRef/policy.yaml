apiVersion: pac.weave.works/v2beta2
kind: Policy
metadata:
  name: weave.policies.helm-chart-source-reference
spec:
  id: weave.policies.helm-chart-source-reference
  name: Helm Chart Source Reference
  enabled: true
  description: "The 'sourceRef.kind' field in the 'spec.chart' section of a HelmChart object can only be one of 'HelmRepository' or 'GitRepository'."
  how_to_solve: "Update the 'sourceRef.kind' field in the 'spec.chart' section of the HelmChart object to either 'HelmRepository' or 'GitRepository'."
  category: weave.categories.configuration
  severity: medium
  targets: {kinds: [HelmChart]}
  tags: [flux]
  parameters:
    - name: exclude_namespaces
      type: array
      required: false
      value: ["kube-system"]
    - name: exclude_label_key
      type: string
      required: false
      value:
    - name: exclude_label_value
      type: string
      required: false
      value:
  code: |
    package weave.advisor.helm_chart_source_refrence

    import future.keywords.in

    exclude_namespaces := input.parameters.exclude_namespaces
    exclude_label_key := input.parameters.exclude_label_key
    exclude_label_value := input.parameters.exclude_label_value

    violation[result] {
        isExcludedNamespace == false
        controller_spec.sourceRef.kind != "HelmRepository"
        controller_spec.sourceRef.kind != "GitRepository"
        not exclude_label_value == controller_input.metadata.labels[exclude_label_key]
        result = {
            "issue detected": true,
            "msg": sprintf("The 'sourceRef.kind' field in the 'spec.chart' section of a HelmChart object can only be one of 'HelmRepository' or 'GitRepository', but found '%s'", [controller_spec.sourceRef.kind]),
            "violating_key": "spec.chart.sourceRef.kind"
        }
    }

    # Controller input
    controller_input = input.review.object

    # controller_container acts as an iterator to get containers from the template
    controller_spec = controller_input.spec {
      controller_input.kind == "HelmChart"
    }

    contains_kind(kind, kinds) {
        kinds[_] = kind
    }

    isExcludedNamespace = true {
        controller_input.metadata.namespace
        controller_input.metadata.namespace in exclude_namespaces
    } else = false
