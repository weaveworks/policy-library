apiVersion: pac.weave.works/v2beta1
kind: Policy
metadata:
  name: weave.policies.container-prohibit-image-tag
spec:
  id: weave.policies.container-prohibit-image-tag
  name: Container Prohibit Image Tag
  enabled: true
  description: "Prohibit certain image tags by specifying them in the Policy. The Policy will also violate if the a tag is not set, or is set to `latest`. \n\nNote: You should avoid using the :latest tag when deploying containers in production as it is harder to track which version of the image is running and more difficult to roll back properly.\n"
  how_to_solve: "Configure an image tag that is not in the Policy. \n```\n...\n  spec:\n    containers:\n    - image: registry/image_name:<tag>\n```\nhttps://kubernetes.io/docs/concepts/configuration/overview/#container-images\n"
  category: weave.categories.software-supply-chain
  severity: high
  targets: {kinds: [Deployment, Job, ReplicationController, ReplicaSet, DaemonSet, StatefulSet, CronJob]}
  standards:
    - id: weave.standards.cis-benchmark
      controls:
        - weave.controls.cis-benchmark.5.5.1
    - id: weave.standards.mitre-attack
      controls:
        - weave.controls.mitre-attack.1.2
    - id: weave.standards.gdpr
      controls:
        - weave.controls.gdpr.25
        - weave.controls.gdpr.32
        - weave.controls.gdpr.24
    - id: weave.standards.soc2-type-i
      controls:
        - weave.controls.soc2-type-i.1.6.8
  tags: [cis-benchmark, mitre-attack, gdpr, soc2-type1, default]
  parameters:
    - name: image_tag
      type: string
      required: true
      value: latest
    - name: exclude_namespace
      type: string
      required: false
      value:
    - name: exclude_label_key
      type: string
      required: false
      value:
    - name: exclude_label_value
      type: string
      required: false
      value:
  code: |-
    package weave.advisor.images.image_tag_enforce
    import future.keywords

    image_tag := input.parameters.image_tag
    exclude_namespace := input.parameters.exclude_namespace
    exclude_label_key := input.parameters.exclude_label_key
    exclude_label_value := input.parameters.exclude_label_value

    violation[result] {
      not exclude_namespace == controller_input.metadata.namespace
      not exclude_label_value == controller_input.metadata.labels[exclude_label_key]
      some i,container in controller_spec.containers
      splittedUrl = split(container.image, "/")
      image = splittedUrl[count(splittedUrl)-1]
      not contains(image, ":")
      result = {
        "issue detected": true,
        "msg": sprintf("Container %s image is not tagged", container.name),
        "violating_key": sprintf("spec.template.spec.containers[%v].image", [i])
      }
    }

    violation[result] {
      some i,container in controller_spec.containers
      splittedUrl = split(container.image, "/")
      image = splittedUrl[count(splittedUrl)-1]
      count(split(image, ":")) == 2
      [image_name, tag] = split(image, ":")
      tag == image_tag
      result = {
        "issue detected": true,
        "msg": sprintf("Container %s image contains unapproved tag '%v'", [container.name, image_tag]),
        "image": image,
        "violating_key": sprintf("spec.template.spec.containers[%v].image", [i])
      }
    }

    violation[result] {
      some i,container in controller_spec.containers
      splittedUrl = split(container.image, "/")
      image = splittedUrl[count(splittedUrl)-1]
      count(split(image, ":")) == 3
      [image_name, port, tag] = split(image, ":")
      tag == image_tag
      result = {
        "issue detected": true,
        "msg": sprintf("Container %s image contains unapproved tag:'%v'", [container.name, image_tag]),
        "image": image,
        "violating_key": sprintf("spec.template.spec.containers[%v].image", [i])
      }
    }

    # Controller input
    controller_input = input.review.object

    # controller_container acts as an iterator to get containers from the template
    controller_spec = controller_input.spec.template.spec {
      contains_kind(controller_input.kind, {"StatefulSet" , "DaemonSet", "Deployment", "Job"})
    } else = controller_input.spec {
      controller_input.kind == "Pod"
    } else = controller_input.spec.jobTemplate.spec.template.spec {
      controller_input.kind == "CronJob"
    }

    contains_kind(kind, kinds) {
      kinds[_] = kind
    }