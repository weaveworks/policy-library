apiVersion: pac.weave.works/v2beta2
kind: Policy
metadata:
  name: weave.policies.bucket-insecure-connections
spec:
  id: weave.policies.bucket-insecure-connections
  name: Bucket Insecure Connections
  enabled: true
  description: "Ensure that Bucket objects do not use insecure connections"
  how_to_solve: "Set 'spec.insecure' to 'false' or remove the field from the Bucket object."
  category: weave.categories.security
  severity: medium
  targets: {kinds: [Bucket]}
  tags: [flux]
  parameters:
    - name: exclude_namespaces
      type: array
      required: false
      value:
    - name: exclude_label_key
      type: string
      required: false
      value:
    - name: exclude_label_value
      type: string
      required: false
      value:
  code: |
    package weave.advisor.bucket_insecure_connections

    import future.keywords.in

    exclude_namespaces := input.parameters.exclude_namespaces
    exclude_label_key := input.parameters.exclude_label_key
    exclude_label_value := input.parameters.exclude_label_value

    violation[result] {
        isExcludedNamespace == false
        controller_spec.insecure == true
        not exclude_label_value == controller_input.metadata.labels[exclude_label_key]
        result = {
            "issue detected": true,
            "msg": "Insecure connections are not allowed for Bucket objects. Please set 'spec.insecure' to 'false' or remove the field.",
            "violating_key": "spec.insecure",
            "recommended_value": "false"  
        }
    }

    # Controller input
    controller_input = input.review.object

    # controller_container acts as an iterator to get containers from the template
    controller_spec = controller_input.spec {
      controller_input.kind == "Bucket"
    }

    contains_kind(kind, kinds) {
      kinds[_] = kind
    }

    isExcludedNamespace = true {
        controller_input.metadata.namespace
        controller_input.metadata.namespace in exclude_namespaces
    } else = false

