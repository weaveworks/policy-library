apiVersion: pac.weave.works/v2beta2
kind: Policy
metadata:
  name: weave.policies.bucket-insecure-connections
spec:
  id: weave.policies.bucket-insecure-connections
  name: Bucket Insecure Connections
  enabled: true
  description: "Ensure that Bucket objects do not use insecure connections"
  how_to_solve: "Set 'spec.insecure' to 'false' or remove the field from the Bucket object."
  category: weave.categories.security
  severity: medium
  targets: {kinds: [Bucket]}
  tags: [flux]
  parameters:
    - name: exclude_namespaces
      type: array
      required: false
      value:
    - name: exclude_label_key
      type: string
      required: false
      value:
    - name: exclude_label_value
      type: string
      required: false
      value:
  code: "package weave.advisor.bucket_insecure_connections\n\nimport future.keywords.in\n\nexclude_namespaces := input.parameters.exclude_namespaces\nexclude_label_key := input.parameters.exclude_label_key\nexclude_label_value := input.parameters.exclude_label_value\n\nviolation[result] {\n    isExcludedNamespace == false\n    not exclude_label_value == controller_input.metadata.labels[exclude_label_key]\n    controller_spec.insecure == true\n    result = {\n        \"issue_detected\": true,\n        \"msg\": \"Insecure connections are not allowed for Bucket objects. Please set 'spec.insecure' to 'false' or remove the field.\",\n        \"violating_key\": \"spec.insecure\",\n        \"recommended_value\": \"false\"  \n    }\n}\n\n# Controller input\ncontroller_input = input.review.object\n\n# controller_container acts as an iterator to get containers from the template\ncontroller_spec = controller_input.spec {\n  controller_input.kind == \"Bucket\"\n}\n\ncontains_kind(kind, kinds) {\n  kinds[_] = kind\n}\n\nisExcludedNamespace = true {\n    controller_input.metadata.namespace\n    controller_input.metadata.namespace in exclude_namespaces\n} else = false\n"
