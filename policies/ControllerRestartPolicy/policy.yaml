apiVersion: pac.weave.works/v2beta1
kind: Policy
metadata:
  name: weave.policies.containers-enforce-restart-policy
spec:
  id: weave.policies.containers-enforce-restart-policy
  name: Containers Enforce Restart Policy
  enabled: false
  description: |
    This Policy checks if a specific restartPolicy is configured in your workloads.
  how_to_solve: "Ensure the restartPolicy is set to some specific policy in your workloads. \n```\n...\n  spec:\n    restartPolicy: <policy>\n```\n"
  category: weave.categories.organizational-standards
  severity: medium
  targets: {kinds: [Deployment, Job, ReplicationController, ReplicaSet, DaemonSet, StatefulSet, CronJob]}
  tags: []
  parameters:
    - name: restart_policy
      type: string
      required: true
      value: Always
    - name: exclude_namespaces
      type: array
      required: false
      value:
    - name: exclude_label_key
      type: string
      required: false
      value:
    - name: exclude_label_value
      type: string
      required: false
      value:
  code: "package weave.advisor.pods.restart_policy\n\nimport future.keywords.in\n\nrestart_policy := input.parameters.restart_policy\nexclude_namespaces := input.parameters.exclude_namespaces\nexclude_label_key := input.parameters.exclude_label_key\nexclude_label_value := input.parameters.exclude_label_value\n\nviolation[result] {\n  isExcludedNamespace == false\n  not exclude_label_value == controller_input.metadata.labels[exclude_label_key]\n  \n  policy = controller_spec[\"restartPolicy\"]\n  policy != restart_policy\n  result = {\n    \"issue detected\": true,\n    \"msg\": sprintf(\"restartPolicy should be '%v'; found '%v'\", [restart_policy, policy]),\n    \"violating_key\": \"spec.template.spec\"\n  }\n}\n\n# Controller input\ncontroller_input = input.review.object\n\n# controller_container acts as an iterator to get containers from the template\ncontroller_spec = controller_input.spec.template.spec {\n  contains_kind(controller_input.kind, {\"StatefulSet\" , \"DaemonSet\", \"Deployment\", \"Job\"})\n} else = controller_input.spec {\n  controller_input.kind == \"Pod\"\n} else = controller_input.spec.jobTemplate.spec.template.spec {\n  controller_input.kind == \"CronJob\"\n}\n\ncontains_kind(kind, kinds) {\n  kinds[_] = kind\n}\n\nisExcludedNamespace = true {\n\tcontroller_input.metadata.namespace\n\tcontroller_input.metadata.namespace in exclude_namespaces\n} else = false\n"
