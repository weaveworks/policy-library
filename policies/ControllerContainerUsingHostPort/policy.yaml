apiVersion: pac.weave.works/v2beta1
kind: Policy
metadata:
  name: weave.policies.containers-using-hostport
spec:
  id: weave.policies.containers-using-hostport
  name: Containers Using Hostport
  enabled: false
  description: "This Policy checks if `hostPort` is set. When `hostPort` is set, a Pod is bound to a hostPort and limits the number of places the Pod can be scheduled. That's because each <hostIP, hostPort, protocol> combination must be unique. If you don't specify the hostIP and protocol explicitly, Kubernetes will use 0.0.0.0 as the default hostIP and TCP as the default protocol.\n\nDon't specify a hostPort for a Pod unless it is absolutely necessary.  \n"
  how_to_solve: "Try avoid setting `hostPort` in your spec. \n```\n...\n  spec:\n    containers:\n    - ports:\n      - hostPort: 8080\n```\nhttps://kubernetes.io/docs/concepts/configuration/overview/#services\n"
  category: weave.categories.network-security
  severity: high
  targets: {kinds: [Deployment, Job, ReplicationController, ReplicaSet, DaemonSet, StatefulSet, CronJob]}
  standards:
    - id: weave.standards.pci-dss
      controls:
        - weave.controls.pci-dss.2.2.2
    - id: weave.standards.nist-800-190
      controls:
        - weave.controls.nist-800-190.4.4.2
  tags: [pci-dss, nist800-190]
  parameters:
    - name: host_port
      type: string
      required: true
      value: hostPort
    - name: exclude_namespaces
      type: array
      required: false
      value:
    - name: exclude_label_key
      type: string
      required: false
      value:
    - name: exclude_label_value
      type: string
      required: false
      value:
  code: "package weave.advisor.podSecurity.deny_hostport\n\nimport future.keywords.in\n\nhost_port := input.parameters.host_port\nexclude_namespaces := input.parameters.exclude_namespaces\nexclude_label_key := input.parameters.exclude_label_key\nexclude_label_value := input.parameters.exclude_label_value\n\nviolation[result] {\n  isExcludedNamespace == false\n  not exclude_label_value == controller_input.metadata.labels[exclude_label_key]\n  some i, j\n  container := controller_spec.containers[i]\n  ports := container.ports[j]\n  has_key(ports, host_port)\n  result = {\n    \"issue detected\": true,\n    \"msg\": sprintf(\"'%v' should not be used unless absolutely necessary; found %v\", [host_port, ports]),\n    \"violating_key\": sprintf(\"spec.template.spec.containers[%v].ports[%v]\", [i,j])  \n  }\n}\n\nhas_key(x, k) { \n  type_name(x[k])\n}\n\n# Controller input\ncontroller_input = input.review.object\n\n# controller_container acts as an iterator to get containers from the template\ncontroller_spec = controller_input.spec.template.spec {\n  contains_kind(controller_input.kind, {\"StatefulSet\" , \"DaemonSet\", \"Deployment\", \"Job\"})\n} else = controller_input.spec {\n  controller_input.kind == \"Pod\"\n} else = controller_input.spec.jobTemplate.spec.template.spec {\n  controller_input.kind == \"CronJob\"\n}\n\ncontains_kind(kind, kinds) {\n  kinds[_] = kind\n}\n\nisExcludedNamespace = true {\n\tcontroller_input.metadata.namespace\n\tcontroller_input.metadata.namespace in exclude_namespaces\n} else = false\n"
