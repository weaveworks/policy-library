apiVersion: magalix.com/v1
kind: Policy
metadata:
  name: magalix.policies.containers-using-hostport
spec:
  enable: true
  name: magalix.policies.containers-using-hostport
  description: |
    This Policy checks if `hostPort` is set. When `hostPort` is set, a Pod is bound to a hostPort and limits the number of places the Pod can be scheduled. That's because each <hostIP, hostPort, protocol> combination must be unique. If you don't specify the hostIP and protocol explicitly, Kubernetes will use 0.0.0.0 as the default hostIP and TCP as the default protocol.

    Don't specify a hostPort for a Pod unless it is absolutely necessary.  
  how_to_solve: |
    Try avoid setting `hostPort` in your spec. 
    ```
    ...
      spec:
        containers:
        - ports:
          - hostPort: 8080
    ```
    https://kubernetes.io/docs/concepts/configuration/overview/#services
  category: magalix.categories.network-security
  severity: high
  targets: {kind: [Deployment, Job, ReplicationController, ReplicaSet, DaemonSet,
      StatefulSet, CronJob]}
  controls:
  - magalix.controls.pci-dss.2.2.2
  - magalix.controls.nist-800-190.4.4.2
  tags: [pci-dss, nist800-190]
  parameters:
  - name: host_port
    type: string
    required: true
    default: hostPort
  - name: exclude_namespace
    type: string
    required: false
    default:
  - name: exclude_label_key
    type: string
    required: false
    default:
  - name: exclude_label_value
    type: string
    required: false
    default:
  code: "package magalix.advisor.podSecurity.deny_hostport\n\nhost_port := input.parameters.host_port\n\
    exclude_namespace := input.parameters.exclude_namespace\nexclude_label_key :=\
    \ input.parameters.exclude_label_key\nexclude_label_value := input.parameters.exclude_label_value\n\
    \nviolation[result] {\n  not exclude_namespace == controller_input.metadata.namespace\n\
    \  not exclude_label_value == controller_input.metadata.labels[exclude_label_key]\n\
    \  some i, j\n  container := controller_spec.containers[i]\n  ports := container.ports[j]\n\
    \  has_key(ports, host_port)\n  result = {\n    \"issue detected\": true,\n  \
    \  \"msg\": sprintf(\"'%v' should not be used unless absolutely necessary; found\
    \ %v\", [host_port, ports]),\n    \"violating_key\": sprintf(\"spec.template.spec.containers[%v].ports[%v]\"\
    , [i,j])  \n  }\n}\n\nhas_key(x, k) { \n  type_name(x[k])\n}\n\n# Controller input\n\
    controller_input = input.review.object\n\n# controller_container acts as an iterator\
    \ to get containers from the template\ncontroller_spec = controller_input.spec.template.spec\
    \ {\n  contains_kind(controller_input.kind, {\"StatefulSet\" , \"DaemonSet\",\
    \ \"Deployment\", \"Job\"})\n} else = controller_input.spec {\n  controller_input.kind\
    \ == \"Pod\"\n} else = controller_input.spec.jobTemplate.spec.template.spec {\n\
    \  controller_input.kind == \"CronJob\"\n}\n\ncontains_kind(kind, kinds) {\n \
    \ kinds[_] = kind\n}"
