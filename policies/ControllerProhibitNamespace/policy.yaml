apiVersion: pac.weave.works/v2beta1
kind: Policy
metadata:
  name: weave.policies.containers-should-not-run-in-namespace
spec:
  id: weave.policies.containers-should-not-run-in-namespace
  name: Containers Should Not Run In Namespace
  enabled: true
  description: "This Policy ensure workloads are not running in a specified namespace. \n"
  how_to_solve: "Use a `namespace` that differs from the one specified in the Policy. \n```\nmetadata:\n  namespace: <custom_namespace>\n```\n\nhttps://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/\n"
  category: weave.categories.organizational-standards
  severity: low
  targets: {kinds: [Deployment, Job, ReplicationController, ReplicaSet, DaemonSet, StatefulSet, CronJob]}
  standards:
    - id: weave.standards.cis-benchmark
      controls:
        - weave.controls.cis-benchmark.5.7.4
    - id: weave.standards.soc2-type-i
      controls:
        - weave.controls.soc2-type-i.2.1.1
  tags: [cis-benchmark, soc2-type1]
  parameters:
    - name: custom_namespace
      type: string
      required: true
      value: default
    - name: exclude_label_key
      type: string
      required: false
      value:
    - name: exclude_label_value
      type: string
      required: false
      value:
  code: |-
    package weave.advisor.pods.not_namespace

    custom_namespace := input.parameters.custom_namespace
    exclude_label_key := input.parameters.exclude_label_key
    exclude_label_value := input.parameters.exclude_label_value

    violation[result] {
      not exclude_label_value == controller_input.metadata.labels[exclude_label_key]
      namespace := controller_input.metadata.namespace
      namespace == custom_namespace
      result = {
        "issue detected": true,
        "msg": sprintf("Workloads must not be running in the namespace '%v'; found '%v'", [custom_namespace, namespace]),
        "violating_key": "metadata.namespace"
      }
    }

    controller_input = input.review.object {
    	contains_kind(input.review.object.kind, {"StatefulSet" , "DaemonSet", "Deployment", "Job", "Pod", "CronJob"})
    }

    contains_kind(kind, kinds) {
      kinds[_] = kind
    }
