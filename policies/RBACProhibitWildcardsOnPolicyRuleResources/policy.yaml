apiVersion: pac.weave.works/v2beta2
kind: Policy
metadata:
  name: weave.templates.rbac-prohibit-wildcards-policyrule-resources
spec:
  id: weave.templates.rbac-prohibit-wildcards-policyrule-resources
  name: Rbac Prohibit Wildcards on Policy Rule Resources
  description: "This Policy prohibits various resources from being set with wildcards for Role or ClusterRole resources, except for the `cluster-admin` ClusterRole. It will check each resource specified for the verb specified. The wildcards will be checked in:\n\n### Resources\nIn the Kubernetes API, most resources are represented and accessed using a string representation of their object name, such as pods for a Pod. RBAC refers to resources using exactly the same name that appears in the URL for the relevant API endpoint. \n\n### Verbs\nAPI verbs like get, list, create, update, patch, watch, delete, and deletecollection are used for resource requests. \n\n### API Groups\nThe API Group being accessed (for resource requests only).\n\n### Non Resource URLs\nRequests to endpoints other than /api/v1/... or /apis/<group>/<version>/... are considered \"non-resource requests\", and use the lower-cased HTTP method of the request as the verb.\n"
  how_to_solve: "Replace the `*` with the appropriate resource. The type of \n```\nrules:\n- <attributes>:\n  - '*'\n    \n```\nhttps://kubernetes.io/docs/reference/access-authn-authz/rbac/\n"
  category: weave.categories.access-control
  severity: high
  targets: {kinds: [Role, ClusterRole]}
  parameters:
    - name: attributes
      type: string
      required: true
      value: "resources"
    - name: exclude_role_name
      type: string
      required: true
      value: ""
    - name: exclude_label_key
      type: string
      required: false
      value:
    - name: exclude_label_value
      type: string
      required: false
      value:
  code: "package weave.advisor.rbac.prohibit_wildcards_policyrule_resources\n\nattributes := input.parameters.attributes\nexclude_role_name := input.parameters.exclude_role_name\nexclude_label_key := input.parameters.exclude_label_key\nexclude_label_value := input.parameters.exclude_label_value\n\n\nviolation[result] {\n  not exclude_label_value == cr_input.metadata.labels[exclude_label_key]\n  not exclude_role_name == cr_input.metadata.name\n  some i, j\n  rules := cr_input.rules[i]\n  path := rules[attributes][j]\n  path == \"*\"\n  result = {\n  \t\"issue_detected\": true,\n    \"msg\": sprintf(\"'%v' cannot be set to '*'; found '%v'\",[attributes, path]),\n    \"violating_key\": sprintf(\"rules[%v].attributes[%v]\", [i,j])\n  }\n}\n\ncr_input = input.review.object {\n\tcontains(input.review.object.kind, \"Role\")\n} \n"
