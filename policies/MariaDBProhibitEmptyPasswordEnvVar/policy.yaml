apiVersion: pac.weave.works/v2beta1
kind: Policy
metadata:
  name: weave.policies.mariadb-prohibit-empty-password-env-var
spec:
  id: weave.policies.mariadb-prohibit-empty-password-env-var
  name: MariaDB Prohibit Environment Variable - MARIADB_ALLOW_EMPTY_PASSWORD
  enabled: false
  description: |
    This Policy ensures MARIADB_ALLOW_EMPTY_PASSWORD environment variable are in place when using the official container images from Docker Hub.
    MARIADB_ALLOW_EMPTY_PASSWORD: MARIADB_ALLOW_EMPTY_PASSWORD set to true will allow the container to be started with a blank password for the root user
  how_to_solve: |
    If you encounter a violation, ensure the MARIADB_ALLOW_EMPTY_PASSWORD environment variables is set.
    For futher information about the MariaDB Docker container, check here: https://hub.docker.com/_/mariadb
  category: weave.categories.access-control
  severity: high
  targets: {kinds: [Deployment, Job, ReplicationController, ReplicaSet, DaemonSet, StatefulSet, CronJob]}
  standards:
    - id: weave.standards.pci-dss
      controls:
        - weave.controls.pci-dss.2.1
    - id: weave.standards.hipaa
      controls:
        - weave.controls.hipaa.164.312.a.1
        - weave.controls.hipaa.164.312.a.2.i
    - id: weave.standards.gdpr
      controls:
        - weave.controls.gdpr.24
        - weave.controls.gdpr.25
        - weave.controls.gdpr.32
  tags: [pci-dss, mitre-attack, hipaa, gdpr]
  parameters:
    - name: exclude_namespaces
      type: array
      required: false
      value:
    - name: exclude_label_key
      type: string
      required: false
      value:
    - name: exclude_label_value
      type: string
      required: false
      value:
  code: |
    package weave.advisor.mariadb.prohibit_empty_password_env_var

    import future.keywords.in

    env_name = "MARIADB_ALLOW_EMPTY_PASSWORD"
    app_name = "mariadb"
    exclude_namespaces := input.parameters.exclude_namespaces
    exclude_label_key := input.parameters.exclude_label_key
    exclude_label_value := input.parameters.exclude_label_value


    violation[result] {
      isExcludedNamespace == false
      not exclude_label_value == controller_input.metadata.labels[exclude_label_key]
      some i, j
      containers := controller_spec.containers[i]
      contains(containers.image, app_name)
      envs := containers.env[j]
      envs.name == env_name
      result = {
        "issue detected": true,
        "msg": sprintf("'%v' should not be set, but has been detected here '%v'", [env_name, envs]),
        "violating_key": sprintf("spec.template.spec.containers[%v].securityContext.allowPrivilegeEscalation", [i]),
      }
    }

    array_contains(array, element) {
      array[_] = element
    }

    # Controller input
    controller_input = input.review.object

    # controller_container acts as an iterator to get containers from the template
    controller_spec = controller_input.spec.template.spec {
      contains_kind(controller_input.kind, {"StatefulSet" , "DaemonSet", "Deployment", "Job"})
    } else = controller_input.spec {
      controller_input.kind == "Pod"
    } else = controller_input.spec.jobTemplate.spec.template.spec {
      controller_input.kind == "CronJob"
    }

    contains_kind(kind, kinds) {
      kinds[_] = kind
    }

    isExcludedNamespace = true {
    	controller_input.metadata.namespace
    	controller_input.metadata.namespace in exclude_namespaces
    } else = false
