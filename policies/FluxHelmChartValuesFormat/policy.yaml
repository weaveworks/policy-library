apiVersion: pac.weave.works/v2beta2
kind: Policy
metadata:
  name: weave.policies.helm-chart-values-files-format
spec:
  id: weave.policies.helm-chart-values-files-format
  name: Helm Chart Values File Format
  enabled: true
  description: "HelmChart must reference values files in the following format: 'xxx=values.yaml'."
  how_to_solve: "Update the HelmChart valuesFrom field to use the correct format."
  category: weave.categories.configuration
  severity: medium
  targets:
    kinds: [HelmChart]
  tags: [flux]
  parameters:
    - name: exclude_namespaces
      type: array
      required: false
      value:
    - name: exclude_label_key
      type: string
      required: false
      value:
    - name: exclude_label_value
      type: string
      required: false
      value:
  code: |
    package weave.advisor.helm_chart_values_files_format

    import future.keywords.in

    exclude_namespaces := input.parameters.exclude_namespaces
    exclude_label_key := input.parameters.exclude_label_key
    exclude_label_value := input.parameters.exclude_label_value

    violation[result] {
        isExcludedNamespace == false
        not exclude_label_value == controller_input.metadata.labels[exclude_label_key]
        values_file := controller_spec.valuesFiles[_]
        not re_match(`^values(-\w+)?\.yaml$`, values_file)
        result = {
            "issue detected": true,
            "msg": sprintf("The HelmChart '%s' must reference values files in the format 'values(-xxx)?.yaml'; found '%s'", [controller_input.metadata.name, values_file]),
            "violating_key": "spec.valuesFiles[_]"
        }
    }

    # Controller input
    controller_input = input.review.object

    # Controller spec
    controller_spec = controller_input.spec {
      controller_input.kind == "HelmChart"
    }

    contains_kind(kind, kinds) {
      kinds[_] = kind
    }

    isExcludedNamespace = true {
      controller_input.metadata.namespace
      controller_input.metadata.namespace in exclude_namespaces
    } else = false
