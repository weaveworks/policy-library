apiVersion: pac.weave.works/v2beta1
kind: Policy
metadata:
  name: weave.policies.container-running-as-user
spec:
  id: weave.policies.container-running-as-user
  name: Container Running As User
  enabled: true
  description: "Containers has a feature in which you specify the ID of the user which all processes in the container will run with. This Policy enforces that the `securityContext.runAsUser` attribute is set to a uid greater than root uid. Running as root user gives the container full access to all resources in the VM it is running on. Containers should not run with such access rights unless required by design. \n"
  how_to_solve: "You should set `securityContext.runAsUser` uid to something greater than root uid. Not setting it will default to giving the container root user rights on the VM that it is running on. \n```\n...\n  spec:\n    securityContext:\n      runAsUser: <uid>\n```\nhttps://kubernetes.io/docs/tasks/configure-pod-container/security-context/\n"
  category: weave.categories.pod-security
  severity: high
  targets: {kinds: [Deployment, Job, ReplicationController, ReplicaSet, DaemonSet, StatefulSet, CronJob]}
  standards:
    - id: weave.standards.pci-dss
      controls:
        - weave.controls.pci-dss.2.2.4
        - weave.controls.pci-dss.2.2.5
    - id: weave.standards.cis-benchmark
      controls:
        - weave.controls.cis-benchmark.5.2.6
    - id: weave.standards.mitre-attack
      controls:
        - weave.controls.mitre-attack.4.1
    - id: weave.standards.nist-800-190
      controls:
        - weave.controls.nist-800-190.3.3.1
    - id: weave.standards.gdpr
      controls:
        - weave.controls.gdpr.24
        - weave.controls.gdpr.25
        - weave.controls.gdpr.32
  tags: [pci-dss, cis-benchmark, mitre-attack, nist800-190, gdpr, default]
  parameters:
    - name: uid
      type: integer
      required: true
      value: 0
    - name: exclude_namespaces
      type: array
      required: false
      value: [kube-system]
    - name: exclude_label_key
      type: string
      required: false
      value:
    - name: exclude_label_value
      type: string
      required: false
      value:
  code: |
    package weave.advisor.podSecurity.runningAsUser

    import future.keywords.in

    uid := input.parameters.uid
    exclude_namespaces := input.parameters.exclude_namespaces
    exclude_label_key := input.parameters.exclude_label_key
    exclude_label_value := input.parameters.exclude_label_value

    # Check for missing securityContext.runAsUser (missing in both, pod and container)
    violation[result] {
    	isExcludedNamespace == false
    	not exclude_label_value == controller_input.metadata.labels[exclude_label_key]

    	controller_spec.securityContext
    	not controller_spec.securityContext.runAsUser

    	some i
    	containers := controller_spec.containers[i]
    	containers.securityContext
    	not containers.securityContext.runAsUser

    	result = {
    		"issue detected": true,
    		"msg": sprintf("Missing spec.template.spec.containers[%v].securityContext.runAsUser and spec.template.spec.securityContext.runAsUser is not defined as well.", [i]),
    		"violating_key": sprintf("spec.template.spec.containers[%v].securityContext", [i]),
    	}
    }

    # Container security context
    # Check if containers.securityContext.runAsUser exists and <= uid
    violation[result] {
    	isExcludedNamespace == false
    	not exclude_label_value == controller_input.metadata.labels[exclude_label_key]

    	some i
    	containers := controller_spec.containers[i]
    	containers.securityContext
    	containers.securityContext.runAsUser
    	containers.securityContext.runAsUser <= uid
    	
    	result = {
    		"issue detected": true,
    		"msg": sprintf("Container is potentially running as root. Please check spec.template.spec.containers[%v].securityContext.runAsUser to see if the UID is correct.", [i]),
    		"violating_key": sprintf("spec.template.spec.containers[%v].securityContext", [i]),
    	}
    }

    # Pod security context
    # Check if spec.securityContext.runAsUser exist and <= uid
    violation[result] {
    	isExcludedNamespace == false
    	not exclude_label_value == controller_input.metadata.labels[exclude_label_key]

    	controller_spec.securityContext
    	controller_spec.securityContext.runAsUser
    	controller_spec.securityContext.runAsUser <= uid

    	result = {
    		"issue detected": true,
    		"msg": "A container is potentially running as root. Please check spec.template.spec.securityContext.runAsUser to see if the UID is correct.",
    		"violating_key": "spec.template.spec.securityContext",
    	}
    }

    controller_input = input.review.object

    controller_spec = controller_input.spec.template.spec {
    	contains(controller_input.kind, {"StatefulSet", "DaemonSet", "Deployment", "Job", "ReplicaSet"})
    } else = controller_input.spec {
    	controller_input.kind == "Pod"
    } else = controller_input.spec.jobTemplate.spec.template.spec {
    	controller_input.kind == "CronJob"
    }

    contains(kind, kinds) {
    	kinds[_] = kind
    }

    isExcludedNamespace = true {
    	controller_input.metadata.namespace
    	controller_input.metadata.namespace in exclude_namespaces
    } else = false
