apiVersion: weaveworks.com/v1
kind: Policy
metadata:
  name: magalix.policies.container-running-as-user
spec:
  enable: true
  name: magalix.policies.container-running-as-user
  description: |
    Containers has a feature in which you specify the ID of the user which all processes in the container will run with. This Policy enforces that the `securityContext.runAsUser` attribute is set to a uid greater than root uid. Running as root user gives the container full access to all resources in the VM it is running on. Containers should not run with such access rights unless required by design. 
  how_to_solve: |
    You should set `securityContext.runAsUser` uid to something greater than root uid. Not setting it will default to giving the container root user rights on the VM that it is running on. 
    ```
    ...
      spec:
        securityContext:
          runAsUser: <uid>
    ```
    https://kubernetes.io/docs/tasks/configure-pod-container/security-context/
  category: magalix.categories.pod-security
  severity: high
  targets: {kind: [Deployment, Job, ReplicationController, ReplicaSet, DaemonSet,
      StatefulSet, CronJob]}
  controls:
  - magalix.controls.pci-dss.2.2.4
  - magalix.controls.pci-dss.2.2.5
  - magalix.controls.cis-benchmark.5.2.6
  - magalix.controls.mitre-attack.4.1
  - magalix.controls.nist-800-190.3.3.1
  - magalix.controls.gdpr.24
  - magalix.controls.gdpr.25
  - magalix.controls.gdpr.32
  tags: [pci-dss, cis-benchmark, mitre-attack, nist800-190, gdpr, default]
  parameters:
  - name: uid
    type: integer
    required: true
    default: 0
  - name: exclude_namespace
    type: string
    required: false
    default: kube-system
  - name: exclude_label_key
    type: string
    required: false
    default:
  - name: exclude_label_value
    type: string
    required: false
    default:
  code: "package magalix.advisor.podSecurity.runningAsUser\n\nexclude_namespace :=\
    \ input.parameters.exclude_namespace\nexclude_label_key := input.parameters.exclude_label_key\n\
    exclude_label_value := input.parameters.exclude_label_value\nuid := input.parameters.uid\n\
    \n# Check for missing securityContext.runAsUser (missing in both, pod and container)\n\
    violation[result] {\n\tnot exclude_namespace == controller_input.metadata.namespace\n\
    \tnot exclude_label_value == controller_input.metadata.labels[exclude_label_key]\n\
    \n\tcontroller_spec.securityContext\n\tnot controller_spec.securityContext.runAsUser\n\
    \n\tsome i\n\tcontainers := controller_spec.containers[i]\n\tcontainers.securityContext\n\
    \tnot containers.securityContext.runAsUser\n\n\tresult = {\n\t\t\"issue detected\"\
    : true,\n\t\t\"msg\": sprintf(\"Missing spec.template.spec.containers[%v].securityContext.runAsUser\
    \ and spec.template.spec.securityContext.runAsUser is not defined as well.\",\
    \ [i]),\n\t\t\"violating_key\": sprintf(\"spec.template.spec.containers[%v].securityContext\"\
    , [i]),\n\t}\n}\n\n# Container security context\n# Check if containers.securityContext.runAsUser\
    \ exists and <= uid\nviolation[result] {\n\tnot exclude_namespace == controller_input.metadata.namespace\n\
    \tnot exclude_label_value == controller_input.metadata.labels[exclude_label_key]\n\
    \n\tsome i\n\tcontainers := controller_spec.containers[i]\n\tcontainers.securityContext\n\
    \tcontainers.securityContext.runAsUser\n\tcontainers.securityContext.runAsUser\
    \ <= uid\n\t\n\tresult = {\n\t\t\"issue detected\": true,\n\t\t\"msg\": sprintf(\"\
    Container is potentially running as root. Please check spec.template.spec.containers[%v].securityContext.runAsUser\
    \ to see if the UID is correct.\", [i]),\n\t\t\"violating_key\": sprintf(\"spec.template.spec.containers[%v].securityContext\"\
    , [i]),\n\t}\n}\n\n# Pod security context\n# Check if spec.securityContext.runAsUser\
    \ exist and <= uid\nviolation[result] {\n\tnot exclude_namespace == controller_input.metadata.namespace\n\
    \tnot exclude_label_value == controller_input.metadata.labels[exclude_label_key]\n\
    \n\tcontroller_spec.securityContext\n\tcontroller_spec.securityContext.runAsUser\n\
    \tcontroller_spec.securityContext.runAsUser <= uid\n\n\tresult = {\n\t\t\"issue\
    \ detected\": true,\n\t\t\"msg\": \"A container is potentially running as root.\
    \ Please check spec.template.spec.securityContext.runAsUser to see if the UID\
    \ is correct.\",\n\t\t\"violating_key\": \"spec.template.spec.securityContext\"\
    ,\n\t}\n}\n\ncontroller_input = input.review.object\n\ncontroller_spec = controller_input.spec.template.spec\
    \ {\n\tcontains(controller_input.kind, {\"StatefulSet\", \"DaemonSet\", \"Deployment\"\
    , \"Job\", \"ReplicaSet\"})\n} else = controller_input.spec {\n\tcontroller_input.kind\
    \ == \"Pod\"\n} else = controller_input.spec.jobTemplate.spec.template.spec {\n\
    \tcontroller_input.kind == \"CronJob\"\n}\n\ncontains(kind, kinds) {\n\tkinds[_]\
    \ = kind\n}"
