apiVersion: pac.weave.works/v2beta1
kind: Policy
metadata:
  name: weave.policies.containers-not-using-runtime-default-seccomp-profile
spec:
  id: weave.policies.containers-not-using-runtime-default-seccomp-profile
  name: Containers Not Using Runtime Default Seccomp Profile
  enabled: true
  description: "This Policy checks for runtime/default seccomp annotation. \n\nSeccomp stands for secure computing mode and has been a feature of the Linux kernel since version 2.6.12. It can be used to sandbox the privileges of a process, restricting the calls it is able to make from userspace into the kernel. Kubernetes lets you automatically apply seccomp profiles loaded onto a Node to your Pods and containers.\n"
  how_to_solve: "Depending on the version of Kubernetes, you either need to set an annotation or a seccomp type in your `securityContext`. \n```\nmetadata:\n  annotations:\n    seccomp.security.alpha.kubernetes.io/pod: <seccomp_annotation>\n```\nAND\n```\n...\n  spec:\n    seccompProfile:\n      type: <seccomp_type>\n```\nhttps://kubernetes.io/docs/tutorials/clusters/seccomp/#create-pod-that-uses-the-container-runtime-default-seccomp-profile\n"
  category: weave.categories.pod-security
  severity: high
  targets: {kinds: [Deployment, Job, ReplicationController, ReplicaSet, DaemonSet, StatefulSet, CronJob]}
  standards:
    - id: weave.standards.cis-benchmark
      controls:
        - weave.controls.cis-benchmark.5.7.2
    - id: weave.standards.nist-800-190
      controls:
        - weave.controls.nist-800-190.4.4.3
    - id: weave.standards.soc2-type-i
      controls:
        - weave.controls.soc2-type-i.1.6.1
  tags: [cis-benchmark, nist800-190, soc2-type1]
  parameters:
    - name: seccomp_annotation
      type: string
      required: true
      value: runtime/default
    - name: seccomp_type
      type: string
      required: true
      value: RuntimeDefault
    - name: exclude_namespaces
      type: array
      required: false
      value:
    - name: exclude_label_key
      type: string
      required: false
      value:
    - name: exclude_label_value
      type: string
      required: false
      value:
  code: "package weave.advisor.podSecurity.seccomp_runtime_default\n\nimport future.keywords.in\n\nseccomp_annotation := input.parameters.seccomp_annotation\nseccomp_type := input.parameters.seccomp_type\nexclude_namespaces := input.parameters.exclude_namespaces\nexclude_label_key := input.parameters.exclude_label_key\nexclude_label_value := input.parameters.exclude_label_value\n\nviolation[result] {\n  isExcludedNamespace == false\n  not exclude_label_value == controller_input.metadata.labels[exclude_label_key]\n  annotation := input.review.object.metadata.annotations[\"seccomp.security.alpha.kubernetes.io/pod\"]\n  not annotation == seccomp_annotation\n  result = {\n    \"issue detected\": true,\n    \"msg\": sprintf(\"The value of the annotation must be '%v'; found '%v'\",[seccomp_annotation, annotation]),\n    \"violating_key\": \"spec.metadata.annotations\"  \n  }\n}\n\n# Pods\nviolation[result] {\n  isExcludedNamespace == false\n  not exclude_label_value == controller_input.metadata.labels[exclude_label_key]\n  type := controller_spec.securityContext.seccompProfile.type\n  not type == seccomp_type\n  result = {\n    \"issue detected\": true,\n    \"msg\": sprintf(\"The secompProfile type must be '%v'; found '%v'\",[seccomp_type, type]),\n    \"violating_key\": \"spec.template.spec.securityContext.seccompProfile.type\"  \n  }\n}\n\n# Non Pods - \"StatefulSet\" , \"DaemonSet\", \"Deployment\", \"Job\"\nviolation[result] {\n  isExcludedNamespace == false\n  not exclude_label_value == controller_input.metadata.labels[exclude_label_key]\n  type := controller_spec.template.spec.securityContext.seccompProfile.type\n  not type == seccomp_type\n  result = {\n    \"issue detected\": true,\n    \"msg\": sprintf(\"The secompProfile type must be '%v'; found '%v'\",[seccomp_type, type]),\n    \"violating_key\": \"spec.template.spec.securityContext.seccompProfile.type\"  \n  }\n}\n\n# CronJobs\nviolation[result] {\n  isExcludedNamespace == false\n  not exclude_label_value == controller_input.metadata.labels[exclude_label_key]\n  type := controller_input.spec.jobTemplate.spec.template.spec.securityContext.seccompProfile.type\n  not type == seccomp_type\n  result = {\n    \"issue detected\": true,\n    \"msg\": sprintf(\"The secompProfile type must be '%v'; found '%v'\",[seccomp_type, type]),\n    \"violating_key\": \"spec.jobTemplate.spec.template.spec.securityContext.seccompProfile.type\"  \n  }\n}\n\n# Controller input\ncontroller_input = input.review.object\n\n# controller_container acts as an iterator to get containers from the template\ncontroller_spec = controller_input.spec.template.spec {\n  contains_kind(controller_input.kind, {\"StatefulSet\" , \"DaemonSet\", \"Deployment\", \"Job\"})\n} else = controller_input.spec {\n  controller_input.kind == \"Pod\"\n} else = controller_input.spec.jobTemplate.spec.template.spec {\n  controller_input.kind == \"CronJob\"\n}\n\ncontains_kind(kind, kinds) {\n  kinds[_] = kind\n}\n\nisExcludedNamespace = true {\n\tcontroller_input.metadata.namespace\n\tcontroller_input.metadata.namespace in exclude_namespaces\n} else = false\n"
