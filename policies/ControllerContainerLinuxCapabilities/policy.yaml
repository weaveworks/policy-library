apiVersion: pac.weave.works/v2beta1
kind: Policy
metadata:
  name: weave.policies.containers-running-with-unapproved-linux-capabilities
spec:
  id: weave.policies.containers-running-with-unapproved-linux-capabilities
  name: Containers Running With Unapproved Linux Capabilities
  enabled: true
  description: "Linux capabilities provide a finer-grained breakdown of the privileges traditionally associated with the superuser. Not specifying those capabilities gives the container access to all OS capabilities which may result in exploiting the VM at which the container is running. The issue is reported when a container has `SYS_ADMIN`, `NET_RAW`, `NET_ADMIN`, or `ALL` capabilities. For this Policy, you can also exclude a namespace, such as `kube-system`. \n\nWith Linux capabilities, you can grant certain privileges to a process without granting all the privileges of the root user. To add or remove Linux capabilities for a Container, include the capabilities field in the securityContext section of the Container manifest.\n"
  how_to_solve: |
    You should set the specific Linux capabilities that your container needs. Or you could simply remove from `capabilities` the values of `SYS_ADMIN`, `NET_ADMIN`, and `ALL`.
    ```
    ...
      spec:
        containers:
        - securityContext:
            capabilities:
              add: ["SYS_ADMIN, "ALL", "NET_ADMIN"]
    ```
    https://kubernetes.io/docs/tasks/configure-pod-container/security-context/
  category: weave.categories.pod-security
  severity: high
  targets: {kinds: [Deployment, Job, ReplicationController, ReplicaSet, DaemonSet, StatefulSet, CronJob]}
  standards:
    - id: weave.standards.pci-dss
      controls:
        - weave.controls.pci-dss.2.2.4
        - weave.controls.pci-dss.2.2.5
    - id: weave.standards.cis-benchmark
      controls:
        - weave.controls.cis-benchmark.5.2.7
        - weave.controls.cis-benchmark.5.2.8
        - weave.controls.cis-benchmark.5.2.9
    - id: weave.standards.mitre-attack
      controls:
        - weave.controls.mitre-attack.4.1
    - id: weave.standards.nist-800-190
      controls:
        - weave.controls.nist-800-190.3.3.1
    - id: weave.standards.gdpr
      controls:
        - weave.controls.gdpr.25
        - weave.controls.gdpr.32
        - weave.controls.gdpr.24
    - id: weave.standards.soc2-type-i
      controls:
        - weave.controls.soc2-type-i.1.6.1
  tags: [pci-dss, cis-benchmark, mitre-attack, nist800-190, gdpr, soc2-type1, default]
  parameters:
    - name: exclude_namespaces
      type: array
      required: false
      value:
  code: "package weave.advisor.podSecurity.capabilities\n\nimport future.keywords.in\n\nexclude_namespaces := input.parameters.exclude_namespaces\nexclude_label_key := input.parameters.exclude_label_key\nexclude_label_value := input.parameters.exclude_label_value\n\nviolation[result] {\n  isExcludedNamespace == false\n  not exclude_label_value == controller_input.metadata.labels[exclude_label_key]\n  isViolatingTheCapabilities\n  result = {\n    \"issue detected\": true,\n    \"msg\": \"Running unapproved capabilities\",\n    \"violating_key\": \"spec.template.spec.containers.securityContext.capabilities\"  \n  }\n}\n\nis_array_contains(array,str) {\n  array[_] = str\n}\n\ndangerousCap := {\"SYS_ADMIN\",\"NEW_RAW\",\"NET_ADMIN\",\"ALL\"}\n\nisViolatingTheCapabilities = true {\n\tcontainer := controller_spec.containers[_]\n    cap := container.securityContext.capabilities.add[_]\n    is_array_contains(dangerousCap,cap)\n\n}else = true{\n    cap := controller_spec.securityContext.capabilities.add[_]\n    is_array_contains(dangerousCap,cap)\n    container := controller_spec.containers[_]\n    not  container.securityContext.capabilities\n\n\n}else = true{\n    cap := controller_spec.securityContext.capabilities.add[_]\n    is_array_contains(dangerousCap,cap)\n    container := controller_spec.containers[_]\n    not  count(container.securityContext.capabilities.add) >=0\n}\n\n# Controller input\ncontroller_input = input.review.object\n\n# controller_container acts as an iterator to get containers from the template\ncontroller_spec = controller_input.spec.template.spec {\n  contains_kind(controller_input.kind, {\"StatefulSet\" , \"DaemonSet\", \"Deployment\", \"Job\"})\n} else = controller_input.spec {\n  controller_input.kind == \"Pod\"\n} else = controller_input.spec.jobTemplate.spec.template.spec {\n  controller_input.kind == \"CronJob\"\n}\n\ncontains_kind(kind, kinds) {\n  kinds[_] = kind\n}\n\nisExcludedNamespace = true {\n\tcontroller_input.metadata.namespace\n\tcontroller_input.metadata.namespace in exclude_namespaces\n} else = false\n"
