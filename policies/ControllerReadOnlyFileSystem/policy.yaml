apiVersion: magalix.com/v1
kind: Policy
metadata:
  name: magalix.policies.containers-read-only-root-filesystem
spec:
  id: magalix.policies.containers-read-only-root-filesystem
  name: Containers Read Only Root Filesystem
  description: |
    This Policy will cause a violation if the root file system is not mounted as specified. As a security practice, the root file system should be read-only or expose risk to your nodes if compromised. 

    This Policy requires containers must run with a read-only root filesystem (i.e. no writable layer).
  how_to_solve: |
    Set `readOnlyRootFilesystem` in your `securityContext` to the value specified in the Policy. 
    ```
    ...
      spec:
        containers:
          - securityContext:
              readOnlyRootFilesystem: <read_only>
    ```

    https://kubernetes.io/docs/concepts/policy/pod-security-policy/#volumes-and-file-systems
  category: magalix.categories.pod-security
  severity: high
  targets: {kind: [Deployment, Job, ReplicationController, ReplicaSet, DaemonSet,
      StatefulSet, CronJob]}
  controls:
  - magalix.controls.mitre-attack.3.2
  - magalix.controls.nist-800-190.4.4.4
  tags: [mitre-attack, nist800-190]
  parameters:
  - name: read_only
    type: boolean
    required: true
    default: true
  - name: exclude_namespace
    type: string
    required: false
    default:
  - name: exclude_label_key
    type: string
    required: false
    default:
  - name: exclude_label_value
    type: string
    required: false
    default:
  code: "package magalix.advisor.podSecurity.enforce_ro_fs\n\nread_only = input.parameters.read_only\n\
    exclude_namespace := input.parameters.exclude_namespace\nexclude_label_key :=\
    \ input.parameters.exclude_label_key\nexclude_label_value := input.parameters.exclude_label_value\n\
    \nviolation[result] {\n  not exclude_namespace == controller_input.metadata.namespace\n\
    \  not exclude_label_value == controller_input.metadata.labels[exclude_label_key]\n\
    \  some i\n  containers := controller_spec.containers[i]\n  root_fs := containers.securityContext.readOnlyRootFilesystem\n\
    \  not root_fs == read_only\n  result = {\n    \"issue detected\": true,\n   \
    \ \"msg\": sprintf(\"readOnlyRootFilesystem should equal '%v'; detected '%v'\"\
    , [read_only, root_fs]),\n    \"recommended_value\": read_only,\n    \"violating_key\"\
    : sprintf(\"spec.template.spec.containers[%v].securityContext.readOnlyRootFilesystem\"\
    , [i]) \n  }\n}\n\n# Controller input\ncontroller_input = input.review.object\n\
    \n# controller_container acts as an iterator to get containers from the template\n\
    controller_spec = controller_input.spec.template.spec {\n  contains_kind(controller_input.kind,\
    \ {\"StatefulSet\" , \"DaemonSet\", \"Deployment\", \"Job\"})\n} else = controller_input.spec\
    \ {\n  controller_input.kind == \"Pod\"\n} else = controller_input.spec.jobTemplate.spec.template.spec\
    \ {\n  controller_input.kind == \"CronJob\"\n}\n\ncontains_kind(kind, kinds) {\n\
    \  kinds[_] = kind\n}"
