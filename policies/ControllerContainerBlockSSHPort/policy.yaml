apiVersion: magalix.com/v1
kind: Policy
metadata:
  name: magalix.policies.containers-block-ssh-port
spec:
  enabled: true
  name: magalix.policies.containers-block-ssh-port
  description: |
    This Policy checks if the container is exposing ssh port.
  how_to_solve: |
    Make sure you are not exposing ssh port on containers.
    ```
    ...
      spec:
        containers:
          ports:
          - containerPort: <port>
    ```
  category: magalix.categories.network-security
  severity: high
  targets: {kind: [Deployment, Job, ReplicationController, ReplicaSet, DaemonSet,
      StatefulSet, CronJob]}
  controls:
  - magalix.controls.pci-dss.1.1.6
  - magalix.controls.pci-dss.1.3.1
  - magalix.controls.pci-dss.2.2.2
  tags: [pci-dss]
  parameters:
  - name: container_port
    type: integer
    required: true
    default: 22
  - name: exclude_namespace
    type: string
    required: false
    default:
  - name: exclude_label_key
    type: string
    required: false
    default:
  - name: exclude_label_value
    type: string
    required: false
    default:
  code: "package magalix.advisor.containers.block_port\n\ncontainer_port := input.parameters.container_port\n\
    exclude_namespace := input.parameters.exclude_namespace\nexclude_label_key :=\
    \ input.parameters.exclude_label_key\nexclude_label_value := input.parameters.exclude_label_value\n\
    \nviolation[result] {\n\tnot exclude_namespace == controller_input.metadata.namespace\n\
    \tnot exclude_label_value == controller_input.metadata.labels[exclude_label_key]\n\
    \tsome i, j\n\tcontainer := controller_spec.containers[i]\n\tport := container.ports[j]\n\
    \tport.containerPort == container_port\n\tresult = {\n\t\t\"issue detected\":\
    \ true,\n\t\t\"msg\": sprintf(\"Container should not expose port %v\", [container_port]),\n\
    \t\t\"violating_key\": sprintf(\"spec.template.spec.containers[%v].ports[%v]\"\
    , [i, j]),\n\t}\n}\n\ncontroller_input = input.review.object\n\ncontroller_spec\
    \ = controller_input.spec.template.spec {\n\tcontains(controller_input.kind, {\"\
    StatefulSet\", \"DaemonSet\", \"Deployment\", \"Job\"})\n} else = controller_input.spec\
    \ {\n\tcontroller_input.kind == \"Pod\"\n} else = controller_input.spec.jobTemplate.spec.template.spec\
    \ {\n\tcontroller_input.kind == \"CronJob\"\n}\n\ncontains(kind, kinds) {\n\t\
    kinds[_] = kind\n}"
