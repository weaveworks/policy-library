apiVersion: pac.weave.works/v2beta1
kind: Policy
metadata:
  name: weave.policies.containers-block-ssh-port
spec:
  id: weave.policies.containers-block-ssh-port
  name: Containers Block Ssh Port
  enabled: false
  description: |
    This Policy checks if the container is exposing ssh port.
  how_to_solve: |
    Make sure you are not exposing ssh port on containers.
    ```
    ...
      spec:
        containers:
          ports:
          - containerPort: <port>
    ```
  category: weave.categories.network-security
  severity: high
  targets: {kinds: [Deployment, Job, ReplicationController, ReplicaSet, DaemonSet, StatefulSet, CronJob]}
  standards:
    - id: weave.standards.pci-dss
      controls:
        - weave.controls.pci-dss.1.1.6
        - weave.controls.pci-dss.1.3.1
        - weave.controls.pci-dss.2.2.2
  tags: [pci-dss]
  parameters:
    - name: container_port
      type: integer
      required: true
      value: 22
    - name: exclude_namespaces
      type: array
      required: false
      value:
    - name: exclude_label_key
      type: string
      required: false
      value:
    - name: exclude_label_value
      type: string
      required: false
      value:
  code: |
    package weave.advisor.containers.block_port

    import future.keywords.in

    container_port := input.parameters.container_port
    exclude_namespaces := input.parameters.exclude_namespaces
    exclude_label_key := input.parameters.exclude_label_key
    exclude_label_value := input.parameters.exclude_label_value

    violation[result] {
    	isExcludedNamespace == false
    	not exclude_label_value == controller_input.metadata.labels[exclude_label_key]
    	some i, j
    	container := controller_spec.containers[i]
    	port := container.ports[j]
    	port.containerPort == container_port
    	result = {
    		"issue detected": true,
    		"msg": sprintf("Container should not expose port %v", [container_port]),
    		"violating_key": sprintf("spec.template.spec.containers[%v].ports[%v]", [i, j]),
    	}
    }

    controller_input = input.review.object

    controller_spec = controller_input.spec.template.spec {
    	contains(controller_input.kind, {"StatefulSet", "DaemonSet", "Deployment", "Job"})
    } else = controller_input.spec {
    	controller_input.kind == "Pod"
    } else = controller_input.spec.jobTemplate.spec.template.spec {
    	controller_input.kind == "CronJob"
    }

    contains(kind, kinds) {
    	kinds[_] = kind
    }

    isExcludedNamespace = true {
    	controller_input.metadata.namespace
    	controller_input.metadata.namespace in exclude_namespaces
    } else = false
