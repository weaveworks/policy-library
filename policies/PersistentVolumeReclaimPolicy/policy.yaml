apiVersion: magalix.com/v1
kind: Policy
metadata:
  name: magalix.policies.persistent-volume-reclaim-policy-should-be-set-to-retain
spec:
  enabled: true
  name: magalix.policies.persistent-volume-reclaim-policy-should-be-set-to-retain
  description: |
    This Policy checks to see whether or not the persistent volume reclaim policy is set.

    PersistentVolumes can have various reclaim policies, including "Retain", "Recycle", and "Delete". For dynamically provisioned PersistentVolumes, the default reclaim policy is "Delete". This means that a dynamically provisioned volume is automatically deleted when a user deletes the corresponding PersistentVolumeClaim. This automatic behavior might be inappropriate if the volume contains precious data. In that case, it is more appropriate to use the "Retain" policy. With the "Retain" policy, if a user deletes a PersistentVolumeClaim, the corresponding PersistentVolume is not be deleted. Instead, it is moved to the Released phase, where all of its data can be manually recovered.
  how_to_solve: |
    Check your reclaim policy configuration within your PersistentVolume configuration. 
    ```
    spec:
      persistentVolumeReclaimPolicy: <pv_policy>
    ```

    https://kubernetes.io/docs/tasks/administer-cluster/change-pv-reclaim-policy/#why-change-reclaim-policy-of-a-persistentvolume
  category: magalix.categories.data-protection
  severity: medium
  targets: {kind: [PersistentVolume]}
  controls:
  - magalix.controls.pci-dss.3.1
  - magalix.controls.soc2-type-1.2.1.2
  tags: [pci-dss, soc2-type1]
  parameters:
  - name: pv_policy
    type: string
    required: true
    default: Retain
  - name: exclude_label_key
    type: string
    required: false
    default:
  - name: exclude_label_value
    type: string
    required: false
    default:
  code: "package magalix.advisor.storage.persistentvolume_reclaim_policy\n\npolicy\
    \ := input.parameters.pv_policy\nexclude_label_key := input.parameters.exclude_label_key\n\
    exclude_label_value := input.parameters.exclude_label_value\n\nviolation[result]\
    \ {\n  pv_policy := storage_spec.persistentVolumeReclaimPolicy\n  not pv_policy\
    \ == policy\n  result = {\n    \"issue detected\": true,\n    \"msg\": sprintf(\"\
    persistentVolumeReclaimPolicy must be '%v'; found '%v'\", [policy, pv_policy]),\n\
    \    \"violating_key\": \"spec.persistentVolumeReclaimPolicy\",\n    \"recommened_value\"\
    : policy\n  }\n}\n\n# controller_container acts as an iterator to get containers\
    \ from the template\nstorage_spec = input.review.object.spec {\n  contains_kind(input.review.object.kind,\
    \ {\"PersistentVolume\"})\n}\n\ncontains_kind(kind, kinds) {\n  kinds[_] = kind\n\
    }\n\n"
