apiVersion: magalix.com/v1
kind: Policy
metadata:
  name: magalix.policies.containers-should-not-run-on-kubernetes-control-plane-nodes
spec:
  enable: true
  name: magalix.policies.containers-should-not-run-on-kubernetes-control-plane-nodes
  description: |
    Tolerations specified in the Policies for this template should not have any workloads scheduled on them. A common use case is the Kubernetes master. 
  how_to_solve: |
    Check your tolerations against the Policy. 
    ```
    ...
      spec:
        tolerations:
        - key: <toleration_key>
    ```

    https://kubernetes.io/docs/concepts/scheduling-eviction/taint-and-toleration/
  category: magalix.categories.capacity-management
  severity: medium
  targets: {kind: [Deployment, Job, ReplicationController, ReplicaSet, DaemonSet,
      StatefulSet, CronJob]}
  controls:
  - magalix.controls.soc2-type1.2.1.1
  tags: [soc2-type1]
  parameters:
  - name: toleration_key
    type: string
    required: true
    default: node-role.kubernetes.io/master
  - name: exclude_namespace
    type: string
    required: false
    default:
  - name: exclude_label_key
    type: string
    required: false
    default:
  - name: exclude_label_value
    type: string
    required: false
    default:
  code: "package magalix.advisor.affinity.pod.no_schedule_toleration\n\ntoleration_key\
    \ := input.parameters.toleration_key\nexclude_namespace := input.parameters.exclude_namespace\n\
    exclude_label_key := input.parameters.exclude_label_key\nexclude_label_value :=\
    \ input.parameters.exclude_label_value\n\nviolation[result] {\n  not exclude_namespace\
    \ == controller_input.metadata.namespace\n  not exclude_label_value == controller_input.metadata.labels[exclude_label_key]\n\
    \  some i\n  tolerations := controller_spec.tolerations[i]\n  key := tolerations.key\n\
    \  key == toleration_key\n  result = {\n    \"issue detected\": true,\n    \"\
    msg\": sprintf(\"Toleration key must not contain '%v'; found '%v'\", [toleration_key,\
    \ key]),\n    \"violating_key\": sprintf(\"spec.template.spec.tolerations[%v].key\"\
    , [i]),\n  }\n}\n\n# Controller input\ncontroller_input = input.review.object\n\
    \n# controller_container acts as an iterator to get containers from the template\n\
    controller_spec = controller_input.spec.template.spec {\n  contains_kind(controller_input.kind,\
    \ {\"StatefulSet\" , \"DaemonSet\", \"Deployment\", \"Job\"})\n} else = controller_input.spec\
    \ {\n  controller_input.kind == \"Pod\"\n} else = controller_input.spec.jobTemplate.spec.template.spec\
    \ {\n  controller_input.kind == \"CronJob\"\n}\n\ncontains_kind(kind, kinds) {\n\
    \  kinds[_] = kind\n}\n\n"
