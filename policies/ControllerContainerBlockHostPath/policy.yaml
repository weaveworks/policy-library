apiVersion: pac.weave.works/v2beta1
kind: Policy
metadata:
  name: weave.policies.containers-using-hostpath
spec:
  id: weave.policies.containers-using-hostpath
  name: Containers Using Hostpath
  enabled: false
  description: "This Policy checks for containers that are trying to use HostPath. \n\nA `hostPath` volume mounts a file or directory from the host node's filesystem into your Pod. This is not something that most Pods will need, but it offers a powerful escape hatch for some applications.\n"
  how_to_solve: "Using HostPath could allow mounting the entire host’s filesystem into your pod, giving you read/write access on the host’s filesystem. This leaves your cluster vulnerable to escape Kubernetes constraints and access components at the Node (OS) level. \n```\n...\n  spec:\n    template:\n      spec:\n        volumes:\n          - hostPath:\n```\n"
  category: weave.categories.pod-security
  severity: high
  targets: {kinds: [Deployment, Job, ReplicationController, ReplicaSet, DaemonSet, StatefulSet, CronJob]}
  standards:
    - id: weave.standards.mitre-attack
      controls:
        - weave.controls.mitre-attack.3.2
    - id: weave.standards.nist-800-190
      controls:
        - weave.controls.nist-800-190.4.4.5
    - id: weave.standards.gdpr
      controls:
        - weave.controls.gdpr.25
        - weave.controls.gdpr.32
        - weave.controls.gdpr.24
  tags: [mitre-attack, nist800-190, gdpr, default]
  parameters:
    - name: hostpath_key
      type: string
      required: true
      value: hostPath
    - name: exclude_namespaces
      type: array
      required: false
      value:
    - name: exclude_label_key
      type: string
      required: false
      value:
    - name: exclude_label_value
      type: string
      required: false
      value:
  code: "package weave.advisor.pods.hostpath\n\nimport future.keywords.in\n\nhostpath_key := input.parameters.hostpath_key\nexclude_namespaces := input.parameters.exclude_namespaces\nexclude_label_key := input.parameters.exclude_label_key\nexclude_label_value := input.parameters.exclude_label_value\n\nviolation[result] {\n  isExcludedNamespace == false\n  not exclude_label_value == controller_input.metadata.labels[exclude_label_key]\n  some i\n  volumes := controller_spec.volumes[i]\n  has_key(volumes, hostpath_key)\n  result = {\n    \"issue detected\": true,\n    \"msg\": sprintf(\"Containers should not be using hostPath; found %v\", [volumes]),\n    \"violating_key\": sprintf(\"spec.template.spec.volumes[%v]\", [i])\n  }\n}\n\nhas_key(x, k) { \n  type_name(x[k])\n}\n\n# Controller input\ncontroller_input = input.review.object\n\n# controller_container acts as an iterator to get containers from the template\ncontroller_spec = controller_input.spec.template.spec {\n  contains_kind(controller_input.kind, {\"StatefulSet\" , \"DaemonSet\", \"Deployment\", \"Job\"})\n} else = controller_input.spec {\n  controller_input.kind == \"Pod\"\n} else = controller_input.spec.jobTemplate.spec.template.spec {\n  controller_input.kind == \"CronJob\"\n}\n\ncontains_kind(kind, kinds) {\n  kinds[_] = kind\n}\n\nisExcludedNamespace = true {\n\tcontroller_input.metadata.namespace\n\tcontroller_input.metadata.namespace in exclude_namespaces\n} else = false\n"
