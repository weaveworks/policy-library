apiVersion: pac.weave.works/v2beta2
kind: Policy
metadata:
  name: weave.policies.ocirepository-provider
spec:
  id: weave.policies.ocirepository-provider
  name: OCIRepository Provider
  enabled: true
  description: "OCIRepository spec.provider must be set to one of AWS, Azure, GCP, or Generic."
  how_to_solve: "Set the spec.provider field of the OCIRepository to one of the allowed values: AWS, Azure, GCP, or Generic."
  category: weave.categories.best-practices
  severity: medium
  targets:
    kinds: [OCIRepository]
  tags: [flux]
  parameters:
    - name: exclude_namespaces
      type: array
      required: false
      value:
    - name: exclude_label_key
      type: string
      required: false
      value:
    - name: exclude_label_value
      type: string
      required: false
      value:
  code: |-
    package weave.advisor.ocirepository_provider

    import future.keywords.in

    allowed_providers := {"AWS", "Azure", "GCP", "Generic"}
    exclude_namespaces := input.parameters.exclude_namespaces
    exclude_label_key := input.parameters.exclude_label_key
    exclude_label_value := input.parameters.exclude_label_value

    violation[result] {
        isExcludedNamespace == false
        not exclude_label_value == controller_input.metadata.labels[exclude_label_key]
        not controller_spec.provider in allowed_providers
        result = {
            "issue detected": true,
            "msg": sprintf("The OCIRepository '%s' spec.provider must be one of %v; found '%s'", [controller_input.metadata.name, allowed_providers, controller_spec.provider]),
            "violating_key": "spec.provider"
        }
    }

    controller_input = input.review.object

    controller_spec = controller_input.spec {
      controller_input.kind == "OCIRepository"
    }

    contains_kind(kind, kinds) {
      kinds[_] = kind
    }

    isExcludedNamespace = true {
        controller_input.metadata.namespace
        controller_input.metadata.namespace in exclude_namespaces
    } else = false
