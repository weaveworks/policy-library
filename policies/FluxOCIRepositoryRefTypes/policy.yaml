apiVersion: pac.weave.works/v2beta2
kind: Policy
metadata:
  name: weave.policies.ocirepository-ref-types
spec:
  id: weave.policies.ocirepository-ref-types
  name: OCIRepository Ref Types
  enabled: true
  description: "OCIRepository resources must use only one of (Semver|Refname|Commit) in spec.ref."
  how_to_solve: "Ensure the OCIRepository spec.ref uses only one of (Semver|Refname|Commit)."
  category: weave.categories.configuration
  severity: medium
  targets:
    kinds: [OCIRepository]
  tags: [flux]
  parameters:
    - name: exclude_namespaces
      type: array
      required: false
      value: []
    - name: exclude_label_key
      type: string
      required: false
      value:
    - name: exclude_label_value
      type: string
      required: false
      value:
  code: |
    package weave.advisor.ocirepository_ref_types

    import future.keywords.in

    exclude_namespaces := input.parameters.exclude_namespaces
    exclude_label_key := input.parameters.exclude_label_key
    exclude_label_value := input.parameters.exclude_label_value

    violation[result] {
        isExcludedNamespace == false
        not exclude_label_value == controller_input.metadata.labels[exclude_label_key]
        ref := controller_spec.ref
        not is_single_ref_type(ref)
        result = {
            "issue detected": true,
            "msg": sprintf("The OCIRepository '%s' must use only one of (branch, semver, commit). Multiple reference types found.", [controller_input.metadata.name]),
            "violating_key": "spec.ref"
        }
    }

    is_single_ref_type(ref) {
        count([k | ref[k]]) == 1
    }

    controller_input = input.review.object

    controller_spec = controller_input.spec {
        controller_input.kind == "OCIRepository"
    }

    contains_kind(kind, kinds) {
    kinds[_] = kind
    }

    isExcludedNamespace = true {
        controller_input.metadata.namespace
        controller_input.metadata.namespace in exclude_namespaces
    } else = false

