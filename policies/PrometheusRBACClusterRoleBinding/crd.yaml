apiVersion: weaveworks.com/v1
kind: Policy
metadata:
  name: magalix.policies.prometheus-clusterrolebinding-has-incorrect-bindings
spec:
  enable: true
  name: magalix.policies.prometheus-clusterrolebinding-has-incorrect-bindings
  description: |
    This Policy checks to see if the Prometheus Cluster Role Binding is bound to a `ClusterRole`, and is tied to a `ServiceAccount` name containing text of your choosing. The default policy is set for search for the Service Account name containing the word `prometheus`. 
  how_to_solve: |
    Ensure the subject name you specify in the Policy matches what you are deploying. 
    ```
    kind: ClusterRoleBinding
    metadata:
      name: prometheus
    ...
    subjects:
    - kind: ServiceAccount
      name: prometheus
    ```
    https://kubernetes.io/docs/reference/access-authn-authz/rbac/
  category: magalix.categories.access-control
  severity: high
  targets: {kind: [ClusterRoleBinding]}
  controls:
  - magalix.controls.pci-dss.7.1.1
  - magalix.controls.pci-dss.7.1.2
  - magalix.controls.hipaa.164.312.a.1
  - magalix.controls.soc2-type1.1.6.3
  tags: [pci-dss, hipaa, soc2-type1]
  parameters:
  - name: prometheus_subject_name
    type: string
    required: true
    default: prometheus
  - name: exclude_label_key
    type: string
    required: false
    default:
  - name: exclude_label_value
    type: string
    required: false
    default:
  code: "package magalix.advisor.rbac.prometheus_server_clusterrolebrinding\n\nsubject_name\
    \ := input.parameters.prometheus_subject_name\nexclude_label_key := input.parameters.exclude_label_key\n\
    exclude_label_value := input.parameters.exclude_label_value\n\nvviolation[result]\
    \ {\n  not exclude_label_value == crb_input.metadata.labels[exclude_label_key]\n\
    \  contains(crb_input.metadata.name, \"prometheus\")\n  some i\n  subjects = crb_input.subjects[i]\n\
    \  not subjects.kind == \"ServiceAccount\"\n  result = {\n    \"issue detected\"\
    : true,\n    \"msg\": sprintf(\"subject kind must be ServiceAccount; found '%v'\"\
    , [subjects.kind]),\n    \"violating_key\": sprintf(\"subjects[%v].kind\", [i])\n\
    \  }\n}\n\nviolation[result] {\n  not exclude_label_value == crb_input.metadata.labels[exclude_label_key]\n\
    \  contains(crb_input.metadata.name, \"prometheus\")\n  some i\n  subjects = crb_input.subjects[i]\n\
    \  not contains(subjects.name, subject_name)\n  result = {\n    \"issue detected\"\
    : true,\n    \"msg\": sprintf(\"subject name must contain '%v'; found '%v'\",\
    \ [subject_name, subjects.name]),\n    \"violating_key\": sprintf(\"subjects[%v].name\"\
    , [i]),\n    \"recommended_value\": subject_name\n  }\n}\n\nviolation[result]\
    \ {\n  not exclude_label_value == crb_input.metadata.labels[exclude_label_key]\n\
    \  contains(crb_input.metadata.name, \"prometheus\")\n  contains(crb_input.metadata.name,\
    \ \"prometheus\")\n  not contains(crb_input.roleRef.kind, \"ClusterRole\")\n \
    \ result = {\n    \"issue detected\": true,\n    \"msg\": sprintf(\"roleRef kind\
    \ must contain be a Role or ClusterRole; found '%v'\", [crb_input.roleRef.kind]),\n\
    \    \"violating_key\": \"roleRef.kind\"\n  }\n}\n\nviolation[result] {\n  not\
    \ exclude_label_value == crb_input.metadata.labels[exclude_label_key]\n  contains(crb_input.metadata.name,\
    \ \"prometheus\")\n  contains(crb_input.metadata.name, \"prometheus\")\n  not\
    \ contains(crb_input.roleRef.name, \"prometheus\")\n  result = {\n    \"issue\
    \ detected\": true,\n    \"msg\": sprintf(\"roleRef name must contain prometheus;\
    \ found '%v'\", [crb_input.roleRef.name]),\n    \"violating_key\": \"roleRef.name\"\
    \n  }\n}\n\ncrb_input = input.review.object {\n  contains_kind(input.review.object.kind,\
    \ {\"ClusterRoleBinding\"})\n} \n\ncontains_kind(kind, kinds) {\n  kinds[_] =\
    \ kind\n}"
