apiVersion: pac.weave.works/v2beta1
kind: Policy
metadata:
  name: weave.policies.services-prohibit-type
spec:
  id: weave.policies.services-prohibit-type
  name: Services Prohibit Type
  enabled: false
  description: "This Policy checks your Kubernetes Service kind to see what Service type is set. If a specified service type is found, this Policy will be in violation. Security practices suggest using types `ServiceType` of `ClusterIP` or `LoadBalancer` and not `NodePort`. \n"
  how_to_solve: "Ensure the type matches what is specified in the Policy. \n```\nspec:\n  type: <type>\n```\n\nhttps://kubernetes.io/docs/concepts/services-networking/service/#nodeport\n"
  category: weave.categories.network-security
  severity: high
  targets: {kinds: [Service]}
  standards:
    - id: weave.standards.pci-dss
      controls:
        - weave.controls.pci-dss.1.1.6
        - weave.controls.pci-dss.1.3.1
        - weave.controls.pci-dss.2.2.2
  tags: [pci-dss]
  parameters:
    - name: type
      type: string
      required: true
      value: NodePort
    - name: exclude_namespaces
      type: array
      required: false
      value:
    - name: exclude_label_key
      type: string
      required: false
      value:
    - name: exclude_label_value
      type: string
      required: false
      value:
  code: |
    package weave.advisor.services.block_servicetype

    import future.keywords.in

    type := input.parameters.type
    exclude_namespaces := input.parameters.exclude_namespaces
    exclude_label_key := input.parameters.exclude_label_key
    exclude_label_value := input.parameters.exclude_label_value

    violation[result] {
      isExcludedNamespace == false
      not exclude_label_value == controller_input.metadata.labels[exclude_label_key]
      service_type := service_spec.type
      service_type == type
      result = {
        "issue detected": true,
        "msg": sprintf("Users not allowed to create a service type '%v'", [type]),
        "violating_key": "spec.type"
      }
    }

    # Controller input
    controller_input = input.review.object

    service_spec = controller_input.spec {
    	contains_kind(controller_input.kind, {"Service"})
    }

    contains_kind(kind, kinds) {
      kinds[_] = kind
    }

    isExcludedNamespace = true {
    	controller_input.metadata.namespace
    	controller_input.metadata.namespace in exclude_namespaces
    } else = false
