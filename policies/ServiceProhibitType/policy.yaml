apiVersion: magalix.com/v1
kind: Policy
metadata:
  name: magalix.policies.services-prohibit-type
spec:
  id: magalix.policies.services-prohibit-type
  name: Services Prohibit Type
  description: |
    This Policy checks your Kubernetes Service kind to see what Service type is set. If a specified service type is found, this Policy will be in violation. Security practices suggest using types `ServiceType` of `ClusterIP` or `LoadBalancer` and not `NodePort`. 
  how_to_solve: |
    Ensure the type matches what is specified in the Policy. 
    ```
    spec:
      type: <type>
    ```

    https://kubernetes.io/docs/concepts/services-networking/service/#nodeport
  category: magalix.categories.network-security
  severity: high
  targets: {kind: [Service]}
  controls:
  - magalix.controls.pci-dss.1.1.6
  - magalix.controls.pci-dss.1.3.1
  - magalix.controls.pci-dss.2.2.2
  tags: [pci-dss]
  parameters:
  - name: type
    type: string
    required: true
    default: NodePort
  - name: exclude_namespace
    type: string
    required: false
    default:
  - name: exclude_label_key
    type: string
    required: false
    default:
  - name: exclude_label_value
    type: string
    required: false
    default:
  code: "package magalix.advisor.services.block_servicetype\n\ntype := input.parameters.type\n\
    exclude_namespace := input.parameters.exclude_namespace\nexclude_label_key :=\
    \ input.parameters.exclude_label_key\nexclude_label_value := input.parameters.exclude_label_value\n\
    \nviolation[result] {\n  not exclude_namespace == controller_input.metadata.namespace\n\
    \  not exclude_label_value == controller_input.metadata.labels[exclude_label_key]\n\
    \  service_type := service_spec.type\n  service_type == type\n  result = {\n \
    \   \"issue detected\": true,\n    \"msg\": sprintf(\"Users not allowed to create\
    \ a service type '%v'\", [type]),\n    \"violating_key\": \"spec.type\"\n  }\n\
    }\n\n# Controller input\ncontroller_input = input.review.object\n\nservice_spec\
    \ = controller_input.spec {\n\tcontains_kind(controller_input.kind, {\"Service\"\
    })\n}\n\ncontains_kind(kind, kinds) {\n  kinds[_] = kind\n}"
