apiVersion: magalix.com/v1
kind: Policy
metadata:
  name: magalix.policies.containers-running-with-privilege-escalation
spec:
  enabled: true
  name: magalix.policies.containers-running-with-privilege-escalation
  description: |
    Containers are running with PrivilegeEscalation configured. Setting this Policy to `true` allows child processes to gain more privileges than its parent process.  

    This Policy gates whether or not a user is allowed to set the security context of a container to `allowPrivilegeEscalation` to `true`. The default value for this is `false` so no child process of a container can gain more privileges than its parent.

    There are 2 parameters for this Policy:
    - exclude_namespace (string) : This sets a namespace you want to exclude from Policy compliance checking. 
    - allow_privilege_escalation (bool) : This checks for the value of `allowPrivilegeEscalation` in your spec.  
  how_to_solve: |
    Check the following path to see what the PrivilegeEscalation value is set to.
    ```
    ...
      spec:
        containers:
          securityContext:
            allowPrivilegeEscalation: <value>
    ```
    https://kubernetes.io/docs/tasks/configure-pod-container/security-context/
  category: magalix.categories.pod-security
  severity: high
  targets: {kind: [Deployment, Job, ReplicationController, ReplicaSet, DaemonSet,
      StatefulSet, CronJob]}
  controls:
  - magalix.controls.pci-dss.2.2.4
  - magalix.controls.pci-dss.2.2.5
  - magalix.controls.cis-benchmark.5.2.5
  - magalix.controls.mitre-attack.4.1
  - magalix.controls.nist-800-190.3.3.2
  - magalix.controls.gdpr.25
  - magalix.controls.gdpr.32
  - magalix.controls.gdpr.24
  - magalix.controls.soc2-type-1.1.6.1
  tags: [pci-dss, cis-benchmark, mitre-attack, nist800-190, gdpr, default, soc2-type1]
  parameters:
  - name: exclude_namespace
    type: string
    required: true
    default: kube-system
  - name: allow_privilege_escalation
    type: boolean
    required: true
    default: false
  - name: exclude_label_key
    type: string
    required: false
    default:
  - name: exclude_label_value
    type: string
    required: false
    default:
  code: "package magalix.advisor.podSecurity.privilegeEscalation\n\nexclude_namespace\
    \ := input.parameters.exclude_namespace\nallow_privilege_escalation := input.parameters.allow_privilege_escalation\n\
    exclude_label_key := input.parameters.exclude_label_key\nexclude_label_value :=\
    \ input.parameters.exclude_label_value\n\nviolation[result] {\n  some i\n  isExcludedNamespace\
    \ == false\n  not exclude_namespace == controller_input.metadata.namespace\n \
    \ not exclude_label_value == controller_input.metadata.labels[exclude_label_key]\n\
    \  containers := controller_spec.containers[i]\n  allow_priv := containers.securityContext.allowPrivilegeEscalation\n\
    \  not allow_priv == allow_privilege_escalation\n  result = {\n    \"issue detected\"\
    : true,\n    \"msg\": sprintf(\"Container's privilegeEscalation should be set\
    \ to '%v'; detected '%v'\", [allow_privilege_escalation, allow_priv]),\n    \"\
    violating_key\": sprintf(\"spec.template.spec.containers[%v].securityContext.allowPrivilegeEscalation\"\
    , [i]),\n    \"recommended_value\": allow_privilege_escalation\n  }\n}\n\nisExcludedNamespace\
    \  = true {\n  input.review.object.metadata.namespace == exclude_namespace\n}else\
    \ = false {true}\n\nis_array_contains(array,str) {\n  array[_] = str\n}\n\n# Controller\
    \ input\ncontroller_input = input.review.object\n\n# controller_container acts\
    \ as an iterator to get containers from the template\ncontroller_spec = controller_input.spec.template.spec\
    \ {\n  contains_kind(controller_input.kind, {\"StatefulSet\" , \"DaemonSet\",\
    \ \"Deployment\", \"Job\"})\n} else = controller_input.spec {\n  controller_input.kind\
    \ == \"Pod\"\n} else = controller_input.spec.jobTemplate.spec.template.spec {\n\
    \  controller_input.kind == \"CronJob\"\n}\n\ncontains_kind(kind, kinds) {\n \
    \ kinds[_] = kind\n}\n"
