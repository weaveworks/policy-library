apiVersion: magalix.com/v1
kind: Policy
metadata:
  name: magalix.templates.affinity-node-selector
spec:
  id: magalix.templates.affinity-node-selector
  name: Affinity Node Selector
  description: |
    This Policy allows setting a key and value for `nodeSelector` when assigning pods to nodes. 

    `nodeSelector` is a field of PodSpec. It specifies a map of key-value pairs. For the pod to be eligible to scheduled on a node, the node must have each of the indicated key-value pairs as labels (it can have additional labels as well). 
  how_to_solve: |
    When working with with `nodeSelector`, the indicated key-value pair will be matched to a node label.  

    ```
    ...
      spec:
        nodeSelector:
          <key>: <value>
    ```
    https://kubernetes.io/docs/concepts/scheduling-eviction/assign-pod-node/#nodeselector
  category: magalix.categories.capacity-management
  severity: medium
  controls:
  - magalix.controls.soc2-type-1.2.1.1
  parameters:
  - name: key
    type: string
    required: true
    default:
  - name: value
    type: string
    required: true
    default:
  - name: exclude_namespace
    type: string
    required: false
    default:
  - name: exclude_label_key
    type: string
    required: false
    default:
  - name: exclude_label_value
    type: string
    required: false
    default:
  code: "package magalix.advisor.affinity.node_selector\n\nkey := input.parameters.key\n\
    value := input.parameters.value\nexclude_namespace := input.parameters.exclude_namespace\n\
    exclude_label_key := input.parameters.exclude_label_key\nexclude_label_value :=\
    \ input.parameters.exclude_label_value\n\nviolation[result] {\n  not exclude_namespace\
    \ == controller_input.metadata.namespace\n  not exclude_label_value == controller_input.metadata.labels[exclude_label_key]\n\
    \  not controller_spec.nodeSelector[key]\n  result = {\n    \"issue detected\"\
    : true,\n    \"msg\": sprintf(\"Looking for key '%v'; found '%v'\", [key, controller_spec.nodeSelector]),\n\
    \    \"violating_key\": \"spec.template.spec.nodeSelector\",\n    \"recommended_value\"\
    : value  \n  }\n}\n\nviolation[result] {\n  not exclude_namespace == controller_input.metadata.namespace\n\
    \  not exclude_label_value == controller_input.metadata.labels[exclude_label_key]\n\
    \  selector_value := controller_spec.nodeSelector[key]\n  not selector_value ==\
    \ value\n  result = {\n    \"issue detected\": true,\n    \"msg\": sprintf(\"\
    Looking for key value pair '%v:%v'; found '%v'\", [key, value, controller_spec.nodeSelector]),\n\
    \    \"recommended_value\": value,\n    \"violating_key\": \"spec.template.spec.nodeSelector[key]\"\
    \n  }\n}\n\n# Controller input\ncontroller_input = input.review.object\n\n# controller_container\
    \ acts as an iterator to get containers from the template\ncontroller_spec = controller_input.spec.template.spec\
    \ {\n  contains_kind(controller_input.kind, {\"StatefulSet\" , \"DaemonSet\",\
    \ \"Deployment\", \"Job\"})\n} else = controller_input.spec {\n  controller_input.kind\
    \ == \"Pod\"\n} else = controller_input.spec.jobTemplate.spec.template.spec {\n\
    \  controller_input.kind == \"CronJob\"\n}\n\ncontains_kind(kind, kinds) {\n \
    \ kinds[_] = kind\n}"
