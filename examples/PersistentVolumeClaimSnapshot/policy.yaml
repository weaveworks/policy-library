apiVersion: pac.weave.works/v2beta2
kind: Policy
metadata:
  name: weave.templates.persistent-volume-claim-snapshot
spec:
  id: weave.templates.persistent-volume-claim-snapshot
  name: Persistent Volume Claim Snapshot
  description: "This Policy checks for a PVC Snapshot. \n"
  how_to_solve: "When using Persistent Volume Claim snapshots, ensure both the `snapshot_class` and `pvc_name` define match what's in the Policy. \n```\nspec:\n  volumeSnapshotClassName: <snapshot_class>\n  source:\n    persistentVolumeClaimName: <pvc_name>\n```\n"
  category: weave.categories.capacity-management
  severity: medium
  standards:
    - id: weave.standards.soc2-type-i
      controls:
        - weave.controls.soc2-type-i.2.1.2
  parameters:
    - name: snapshot_class
      type: string
      required: true
      value:
    - name: pvc_name
      type: string
      required: true
      value:
    - name: exclude_label_key
      type: string
      required: false
      value:
    - name: exclude_label_value
      type: string
      required: false
      value:
  code: |
    package weave.advisor.storage.persistentvolumeclaim_snapshot

    snapshot_class := input.parameters.snapshot_class
    pvc_name := input.parameters.pvc_name
    exclude_label_key := input.parameters.exclude_label_key
    exclude_label_value := input.parameters.exclude_label_value

    violation[result] {
      not exclude_label_value == controller_input.metadata.labels[exclude_label_key]
      snapshot := volume_spec.volumeSnapshotClassName
      not snapshot == snapshot_class
      result = {
    	"issue detected": true,
        "msg": sprintf("VolumeSnapshotClassName names should be '%v', detected '%v'",[snapshot_class, snapshot]),
        "violating_key": "spec.volumeSnapshotClassName",
        "recommended_value": snapshot_class
    	}
    }

    violation[result] {
      not exclude_label_value == controller_input.metadata.labels[exclude_label_key]
      claim_name := volume_spec.source.persistentVolumeClaimName
      not claim_name == pvc_name
      result = {
    	"issue": true,
        "msg": sprintf("PVC names should be '%v', detected '%v'",[pvc_name, claim_name]),
        "violating_key": "spec.source.persistentVolumeClaimName"
    	}
    }

    # Controller input
    controller_input = input.review.object

    # controller_container acts as an iterator to get containers from the template
    volume_spec = controller_input.spec {
      contains_kind(controller_input.kind, {"VolumeSnapshot"})
    }

    contains_kind(kind, kinds) {
      kinds[_] = kind
    }
