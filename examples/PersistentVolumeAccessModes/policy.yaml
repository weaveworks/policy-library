apiVersion: pac.weave.works/v2beta2
kind: Policy
metadata:
  name: weave.templates.persistent-volume-access-modes
spec:
  id: weave.templates.persistent-volume-access-modes
  name: Persistent Volume Access Modes
  description: |
    A PersistentVolume can be mounted on a host in any way supported by the resource provider. As shown in the table below, providers will have different capabilities and each PV's access modes are set to the specific modes supported by that particular volume. For example, NFS can support multiple read/write clients, but a specific NFS PV might be exported on the server as read-only. Each PV gets its own set of access modes describing that specific PV's capabilities.

    The access modes are:

    * ReadWriteOnce
    * ReadOnlyMany
    * ReadWriteMany
    * ReadWriteOncePod
  how_to_solve: "Ensure the <name> of your Persistent Volume and <access_mode> set in your Policy match the PV you want to check.\n```\napiVersion: v1\nkind: PersistentVolume\nmetadata: \n  name: <name>\nspec: \n  accessModes: \n    - <access_mode>\n```\n"
  category: weave.categories.capacity-management
  severity: medium
  standards:
    - id: weave.standards.soc2-type-i
      controls:
        - weave.controls.soc2-type-i.2.1.1
  parameters:
    - name: name
      type: string
      required: true
      value:
    - name: access_mode
      type: string
      required: true
      value:
  code: |-
    package weave.advisor.storage.persistentvolume_acccess_mode

    access_mode := input.parameters.access_mode
    name := input.parameters.name

    violation[result] {
      spec_name := controller_input.metadata.name
      spec_name == name
      spec_access_modes := storage_spec.accessModes
      not array_contains(spec_access_modes, access_mode)
      result = {
        "issue_detected": true,
        "msg": sprintf("Access Modes should contain '%v'; found '%v'", [access_mode, spec_access_modes]),
        "violating_key": "spec.accessModes"
      }
    }

    array_contains(array, element) {
      array[_] = element
    }

    # Controller input
    controller_input = input.review.object

    # controller_container acts as an iterator to get containers from the template
    storage_spec = controller_input.spec {
      contains_kind(controller_input.kind, {"PersistentVolume"})
    }

    contains_kind(kind, kinds) {
      kinds[_] = kind
    }
