apiVersion: pac.weave.works/v2beta2
kind: Policy
metadata:
  name: weave.policies.helm-release-values-from
spec:
  id: weave.policies.helm-release-values-from
  name: Helm Release Values From
  enabled: true
  description: "HelmRelease valuesFrom must use correctly configured ConfigMaps."
  how_to_solve: "Ensure that the HelmRelease uses allowed ConfigMaps in the valuesFrom field."
  category: weave.categories.security
  severity: medium
  targets:
    kinds: [HelmRelease]
  tags: [flux]
  parameters:
    - name: exclude_namespaces
      type: array
      required: false
      value: []
    - name: exclude_label_key
      type: string
      required: false
      value:
    - name: exclude_label_value
      type: string
      required: false
      value:
    - name: allowed_configmaps
      type: array
      required: true
      value:
        - allowed-configmap
  code: |
    package weave.advisor.helm_release_values_from_configmaps

    import future.keywords.in

    exclude_namespaces := input.parameters.exclude_namespaces
    exclude_label_key := input.parameters.exclude_label_key
    exclude_label_value := input.parameters.exclude_label_value
    allowed_configmaps := input.parameters.allowed_configmaps

    violation[result] {
        isExcludedNamespace == false
        not exclude_label_value == controller_input.metadata.labels[exclude_label_key]
        some i
        value_from := controller_spec.valuesFrom[i]
        value_from.configMapKeyRef.name
        not value_from.configMapKeyRef.name in allowed_configmaps
        result = {
            "issue detected": true,
            "msg": sprintf("The HelmRelease '%s' is using an unallowed ConfigMap '%s' in valuesFrom.", [controller_input.metadata.name, value_from.configMapKeyRef.name]),
            "violating_key": sprintf("spec.valuesFrom[%d].configMapKeyRef.name", [i])
        }
    }

    # Controller input
    controller_input = input.review.object

    # controller_container acts as an iterator to get containers from the template
    controller_spec = controller_input.spec {
        controller_input.kind == "HelmRelease"
    }

    contains_kind(kind, kinds) {
        kinds[_] = kind
    }

    isExcludedNamespace = true {
        controller_input.metadata.namespace
        controller_input.metadata.namespace in exclude_namespaces
    } else = false

