apiVersion: pac.weave.works/v2beta1
kind: Policy
metadata:
  name: weave.templates.network-block-all-ingress-traffic-to-namespace-from-cidr-block
spec:
  id: weave.templates.network-block-all-ingress-traffic-to-namespace-from-cidr-block
  name: Network Block All Ingress Traffic To Namespace From CIDR Block
  description: "If you are using a CNI that allows for Network Policies, you can use this Policy to block all Egress traffic from a specified namespace to a CIDR block of IP addresses. \n\nBy default, if no policies exist in a namespace, then all ingress and egress traffic is allowed to and from pods in that namespace. \n"
  how_to_solve: "Validate your use case and check network policies for traffic blocking. \n\nhttps://kubernetes.io/docs/concepts/services-networking/network-policies/\n"
  category: weave.categories.network-security
  severity: medium
  standards:
    - id: weave.standards.pci-dss
      controls:
        - weave.controls.pci-dss.1.2.1
    - id: weave.standards.soc2-type-i
      controls:
        - weave.controls.soc2-type-i.1.6.1
  parameters:
    - name: namespace
      type: string
      required: true
      value:
    - name: cidr
      type: string
      required: true
      value:
    - name: exclude_label_key
      type: string
      required: false
      value:
    - name: exclude_label_value
      type: string
      required: false
      value:
  code: |-
    package weave.advisor.network.block.ingress.to.namespace.from.cidr

    namespace := input.parameters.namespace
    cidr := input.parameters.cidr
    exclude_label_key := input.parameters.exclude_label_key
    exclude_label_value := input.parameters.exclude_label_value

    violation[result] {
      not exclude_label_value == np_input.metadata.labels[exclude_label_key]
      namespace == np_input.metadata.namespace
      some i, j
      spec_ingress := np_input.spec.ingress[i]
      ingress_from := spec_ingress.from[j]
      not array_contains(ingress_from.ipBlock.except, cidr)
      result = {
        "issue_detected": true,
        "msg": sprintf("CIDR block should contain '%v'; but %v was detected", [cidr, ingress_from.ipBlock.except]),
        "violating_key": sprintf("spec.egress[%v].from[%v].ipBlock.cidr.except", [i, j]),
        "recommended_value": cidr
      }
    }

    array_contains(array, element) {
      array[_] = element
    }

    np_input = input.review.object {
      contains_kind(input.review.object.kind, {"NetworkPolicy"})
    }

    contains_kind(kind, kinds) {
      kinds[_] = kind
    }
