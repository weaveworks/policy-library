apiVersion: weaveworks.com/v1
kind: Policy
metadata:
  name: magalix.policies.rabbitmq-enforce-environment-variable
spec:
  enable: true
  name: magalix.policies.rabbitmq-enforce-environment-variable
  description: |
    This Policy checks for specific environment variables when you are using the official container image from Docker Hub. 
    ### RABBITMQ_DEFAULT_USER
    The RABBITMQ_DEFAULT_USER environment variable sets the User name to create when RabbitMQ creates a new database from scratch.

    ### RABBITMQ_DEFAULT_PASS     
    The RABBITMQ_DEFAULT_PASS environment variable sets the password for the default user.
  how_to_solve: |
    If you encounter a violation, ensure one of the following environment variables is set. 
    - RABBITMQ_DEFAULT_USER
    - RABBITMQ_DEFAULT_PASS 

    For futher information about the RabbitMQ Docker container, check here: https://hub.docker.com/_/rabbitmq
  category: magalix.categories.access-control
  severity: high
  controls:
  - magalix.controls.pci-dss.2.1
  - magalix.controls.hipaa.164.312.a.2.i
  - magalix.controls.gdpr.25
  - magalix.controls.gdpr.32
  - magalix.controls.gdpr.24
  - magalix.controls.hipaa.164.312.a.1
  parameters:
  - name: envvar_name
    type: string
    required: true
    default:
  - name: app_name
    type: string
    required: true
    default:
  - name: exclude_namespace
    type: string
    required: false
    default:
  - name: exclude_label_key
    type: string
    required: false
    default:
  - name: exclude_label_value
    type: string
    required: false
    default:
  code: "package magalix.advisor.rabbitmq.enforce_env_vars_authentication\n\nenv_name\
    \ = input.parameters.envvar_name\napp_name = input.parameters.app_name\nexclude_namespace\
    \ = input.parameters.exclude_namespace\nexclude_label_key := input.parameters.exclude_label_key\n\
    exclude_label_value := input.parameters.exclude_label_value\n\nviolation[result]\
    \ {\n  not exclude_namespace == controller_input.metadata.namespace\n  not exclude_label_value\
    \ == controller_input.metadata.labels[exclude_label_key]\n  some i\n  containers\
    \ := controller_spec.containers[i]\n  contains(containers.image, app_name)\n \
    \ not containers.env\n  result = {\n    \"issue detected\": true,\n    \"msg\"\
    : \"environment variables needs to be set\",\n    \"violating_key\": sprintf(\"\
    spec.template.spec.containers[%v]\", [i])\n  }\n}\n\nviolation[result] {\n  not\
    \ exclude_namespace == controller_input.metadata.namespace\n  not exclude_label_value\
    \ == controller_input.metadata.labels[exclude_label_key]\n  some i\n  containers\
    \ := controller_spec.containers[i]\n  contains(containers.image, app_name)\n \
    \ envs := containers.env\n  not array_contains(envs, env_name)\n  result = {\n\
    \    \"issue detected\": true,\n    \"msg\": sprintf(\"'%v' is missing'; detected\
    \ '%v'\", [env_name, envs]),\n    \"violating_key\": sprintf(\"spec.template.spec.containers[%v].env.name\"\
    , [i])\n  }\n}\n\n\narray_contains(array, element) {\n  array[_].name = element\n\
    }\n\n# Controller input\ncontroller_input = input.review.object\n\n# controller_container\
    \ acts as an iterator to get containers from the template\ncontroller_spec = controller_input.spec.template.spec\
    \ {\n  contains_kind(controller_input.kind, {\"StatefulSet\" , \"DaemonSet\",\
    \ \"Deployment\", \"Job\"})\n} else = controller_input.spec {\n  controller_input.kind\
    \ == \"Pod\"\n} else = controller_input.spec.jobTemplate.spec.template.spec {\n\
    \  controller_input.kind == \"CronJob\"\n}\n\ncontains_kind(kind, kinds) {\n \
    \ kinds[_] = kind\n}"
