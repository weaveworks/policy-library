apiVersion: pac.weave.works/v2beta2
kind: Policy
metadata:
  name: weave.policies.gitrepository-organization-domains
spec:
  id: weave.policies.gitrepository-organization-domains
  name: GitRepository Organization Domains
  enabled: true
  description: "GitRepository resources must only be from allowed organization domains."
  how_to_solve: "Ensure the GitRepository URL belongs to an allowed organization domain."
  category: weave.categories.software-supply-chain
  severity: medium
  targets:
    kinds: [GitRepository]
  tags: [flux]
  parameters:
    - name: domains
      type: array
      required: true
      value:
    - name: exclude_namespaces
      type: array
      required: false
      value: []
    - name: exclude_label_key
      type: string
      required: false
      value:
    - name: exclude_label_value
      type: string
      required: false
      value:
  code: |
    package weave.advisor.gitrepository_organization_domains

    import future.keywords.in

    domains := input.parameters.domains
    exclude_namespaces := input.parameters.exclude_namespaces
    exclude_label_key := input.parameters.exclude_label_key
    exclude_label_value := input.parameters.exclude_label_value

    violation[result] {
        isExcludedNamespace == false
        not exclude_label_value == controller_input.metadata.labels[exclude_label_key]
        repo_url := controller_spec.url
        not domain_matches(repo_url, domains)
        result = {
            "issue_detected": true,
            "msg": sprintf("The GitRepository '%s' must be from an allowed organization domain. Found: '%s'", [controller_input.metadata.name, repo_url]),
            "violating_key": "spec.url"
        }
    }

    domain_matches(url, domains) {
        startswith(url, "https://")
        parts := split(url, "/")
        count(parts) > 2
        domain := parts[2]
        domain in domains
    }

    domain_matches(url, domains) {
    startswith(url, "http://")
    parts := split(url, "/")
    count(parts) > 2
    domain := parts[2]
    domain in domains
    }

    controller_input = input.review.object

    controller_spec = controller_input.spec {
        controller_input.kind == "GitRepository"
    }

    contains_kind(kind, kinds) {
        kinds[_] = kind
    }

    isExcludedNamespace = true {
        controller_input.metadata.namespace
        controller_input.metadata.namespace in exclude_namespaces
    } else = false

