apiVersion: magalix.com/v1
kind: Policy
metadata:
  name: magalix.policies.mongo-enforce-environment-variable
spec:
  id: magalix.policies.mongo-enforce-environment-variable
  name: Mongo Enforce Environment Variable
  description: |
    This Policy checks for specific environment variables when you are using the official container image from Docker Hub. 
    ### MONGO_INITDB_ROOT_USERNAME. 
    The MONGO_INITDB_ROOT_USERNAME environment variable sets the MongoDB root user name.
    ### MONGO_INITDB_ROOT_PASSWORD
    The MONGO_INITDB_ROOT_PASSWORD environment variable sets the MongoDB root user password.
    ### MONGO_INITDB_ROOT_USERNAME_FILE
    The MONGO_INITDB_ROOT_USERNAME_FILE environment variable is an alternative to passing sensitive information via environment variables, _FILE may be appended to the previously listed environment variables, causing the initialization script to load the values for those variables from files present in the container.
    ### MONGO_INITDB_ROOT_PASSWORD_FILE
    The MONGO_INITDB_ROOT_PASSWORD_FILE environment variable is an alternative to passing sensitive information via environment variables, _FILE may be appended to the previously listed environment variables, causing the initialization script to load the values for those variables from files present in the container.
  how_to_solve: |
    If you encounter a violation, ensure one of the following environment variables is set. 
    - MONGO_INITDB_ROOT_USERNAME
    - MONGO_INITDB_ROOT_PASSWORD
    - MONGO_INITDB_ROOT_USERNAME_FILE
    - MONGO_INITDB_ROOT_PASSWORD_FILE

    For futher information about the Mongo-Express Docker container, check here: https://hub.docker.com/_/mongo
  category: magalix.categories.access-control
  severity: high
  controls:
  - magalix.controls.pci-dss.2.1
  - magalix.controls.hipaa.164.312.a.2.i
  - magalix.controls.hipaa.164.312.a.1
  parameters:
  - name: envvar_name
    type: string
    required: true
    default:
  - name: app_name_name
    type: string
    required: true
    default:
  - name: exclude_app_name
    type: string
    required: true
    default:
  - name: exclude_namespace
    type: string
    required: false
    default:
  - name: exclude_label_key
    type: string
    required: false
    default:
  - name: exclude_label_value
    type: string
    required: false
    default:
  code: "package magalix.advisor.mongo.enforce_env_vars\n\nenv_name = input.parameters.envvar_namevar_name\n\
    app_name = input.parameters.app_name_name\nexclude_app_name = input.parameters.exclude_app_name\n\
    exclude_namespace = input.parameters.exclude_namespace\nexclude_label_key := input.parameters.exclude_label_key\n\
    exclude_label_value := input.parameters.exclude_label_value\n\nviolation[result]\
    \ {\n  not exclude_namespace == controller_input.metadata.namespace\n  not exclude_label_value\
    \ == controller_input.metadata.labels[exclude_label_key]\n  some i\n  containers\
    \ := controller_spec.containers[i]\n  contains(containers.image, app_name)\n \
    \ not contains(containers.image, exclude_app_name)\n  not containers.env\n  result\
    \ = {\n    \"issue detected\": true,\n    \"msg\": \"environment variables needs\
    \ to be set\",\n    \"violating_key\": sprintf(\"spec.template.spec.containers[%v]\"\
    , [i]),\n  }\n}\n\n\nviolation[result] {\n  not exclude_namespace == controller_input.metadata.namespace\n\
    \  not exclude_label_value == controller_input.metadata.labels[exclude_label_key]\n\
    \  some i\n  containers := controller_spec.containers[i]\n  contains(containers.image,\
    \ app_name)\n  not contains(containers.image, exclude_app_name)\n  envs := containers.env\n\
    \  not array_contains(envs, env_name)\n  result = {\n    \"issue detected\": true,\n\
    \    \"msg\": sprintf(\"'%v' is missing'; detected '%v'\", [env_name, envs]),\n\
    \    \"violating_key\": sprintf(\"spec.template.spec.containers[%v].env.name\"\
    , [i]),\n  }\n}\n\n\narray_contains(array, element) {\n  array[_].name = element\n\
    }\n\n# Controller input\ncontroller_input = input.review.object\n\n# controller_container\
    \ acts as an iterator to get containers from the template\ncontroller_spec = controller_input.spec.template.spec\
    \ {\n  contains_kind(controller_input.kind, {\"StatefulSet\" , \"DaemonSet\",\
    \ \"Deployment\", \"Job\"})\n} else = controller_input.spec {\n  controller_input.kind\
    \ == \"Pod\"\n} else = controller_input.spec.jobTemplate.spec.template.spec {\n\
    \  controller_input.kind == \"CronJob\"\n}\n\ncontains_kind(kind, kinds) {\n \
    \ kinds[_] = kind\n}"
