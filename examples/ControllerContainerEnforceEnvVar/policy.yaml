apiVersion: pac.weave.works/v2beta1
kind: Policy
metadata:
  name: weave.templates.container-enforce-environment-variable
spec:
  id: weave.templates.container-enforce-environment-variable
  name: Container Enforce Environment Variable
  description: "This Policy checks whether an environment variable is missing or not. \n"
  how_to_solve: "If you encounter a violation, ensure the environment variable is set. \n"
  category: weave.categories.access-control
  severity: high
  standards:
    - id: weave.standards.pci-dss
      controls:
        - weave.controls.pci-dss.2.1
    - id: weave.standards.hipaa
      controls:
        - weave.controls.hipaa.164.312.a.2.i
        - weave.controls.hipaa.164.312.a.1
    - id: weave.standards.gdpr
      controls:
        - weave.controls.gdpr.25
        - weave.controls.gdpr.32
        - weave.controls.gdpr.24
  parameters:
    - name: envvar_name
      type: string
      required: true
      value:
    - name: app_name
      type: string
      required: true
      value:
    - name: exclude_namespaces
      type: array
      required: false
      value:
    - name: exclude_label_key
      type: string
      required: false
      value:
    - name: exclude_label_value
      type: string
      required: false
      value:
  code: |-
    package weave.advisor.container.enforce_env_var

    import future.keywords.in

    env_name := input.parameters.envvar_name
    app_name := input.parameters.app_name
    exclude_namespaces := input.parameters.exclude_namespaces
    exclude_label_key := input.parameters.exclude_label_key
    exclude_label_value := input.parameters.exclude_label_value


    violation[result] {
      not controller_input.metadata.namespace in exclude_namespaces
      not exclude_label_value == controller_input.metadata.labels[exclude_label_key]
      some i
      containers := controller_spec.containers[i]
      contains(containers.image, app_name)
      not containers.env
      result = {
        "issue detected": true,
        "msg": "environment variables needs to be set",
        "violating_key": sprintf("spec.template.spec.containers[%v]", [i]),  }
    }

    violation[result] {
      not controller_input.metadata.namespace in exclude_namespaces
      not exclude_label_value == controller_input.metadata.labels[exclude_label_key]
      some i
      containers := controller_spec.containers[i]
      contains(containers.image, app_name)
      envs := containers.env
      not array_contains(envs, env_name)
      result = {
        "issue detected": true,
        "msg": sprintf("'%v' is missing'; detected '%v'", [env_name, envs]),
        "violating_key": sprintf("spec.template.spec.containers[%v].env.name", [i])
      }
    }


    array_contains(array, element) {
      array[_].name = element
    }

    # Controller input
    controller_input = input.review.object

    # controller_container acts as an iterator to get containers from the template
    controller_spec = controller_input.spec.template.spec {
      contains_kind(controller_input.kind, {"StatefulSet" , "DaemonSet", "Deployment", "Job"})
    } else = controller_input.spec {
      controller_input.kind == "Pod"
    } else = controller_input.spec.jobTemplate.spec.template.spec {
      controller_input.kind == "CronJob"
    }

    contains_kind(kind, kinds) {
      kinds[_] = kind
    }
