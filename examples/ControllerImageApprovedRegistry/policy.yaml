apiVersion: pac.weave.works/v2beta1
kind: Policy
metadata:
  name: weave.templates.approved-registry
spec:
  id: weave.templates.approved-registry
  name: Approved Registry
  description: "This Policy is violated when container images are not using approved container registries. The Policy allows for you to add multiple registries. \n"
  how_to_solve: "Ensure the image registry you are using matches the registries specified in the policy. If you are using multiple containers, be sure to check those as well. \n\nReplace the violating registry with one that is approved. \n```\n...\n  spec:\n    template:\n      spec:\n        containers:\n        - image:<registries>/container_name:tag\n```\n"
  category: weave.categories.software-supply-chain
  severity: high
  standards:
    - id: weave.standards.soc2-type-i
      controls:
        - weave.controls.soc2-type-i.1.6.8
  parameters:
    - name: registries
      type: array
      required: true
      value:
    - name: exclude_namespaces
      type: array
      required: false
      value:
    - name: exclude_label_key
      type: string
      required: false
      value:
    - name: exclude_label_value
      type: string
      required: false
      value:
  code: |
    package weave.advisor.images.approved_registry

    import future.keywords.in

    my_registries := input.parameters.registries
    exclude_namespaces := input.parameters.exclude_namespaces
    exclude_label_key := input.parameters.exclude_label_key
    exclude_label_value := input.parameters.exclude_label_value

    violation[result] {
      not controller_input.metadata.namespace in exclude_namespaces
      not exclude_label_value == controller_input.metadata.labels[exclude_label_key]
      some i
      container_controller := controller_spec.containers[i]
      image_path := container_controller.image
      registry := get_registry(image_path)
      not array_contains(my_registries, registry)
      result = {
        "issue detected": true,
        "msg": sprintf("regsitry must be from '%v'; found '%v'", [my_registries, registry]),
        "violating_key": sprintf("spec.template.spec.containers[%v].image", [i])
      }
    }

    get_registry(str) = registry {
      contains(str, "/")
      path := split(str, "/")
      registry := path[0]
    }

    get_registry(str) = registry {
      not contains(str, "/")
      registry := ""
    }

    array_contains(array, element) {
      array[_] = element
    }

    # Controller input
    controller_input = input.review.object

    # controller_container acts as an iterator to get containers from the template
    controller_spec = controller_input.spec.template.spec {
      contains_kind(controller_input.kind, {"StatefulSet" , "DaemonSet", "Deployment", "Job"})
    } else = controller_input.spec {
      controller_input.kind == "Pod"
    } else = controller_input.spec.jobTemplate.spec.template.spec {
      controller_input.kind == "CronJob"
    }

    contains_kind(kind, kinds) {
      kinds[_] = kind
    }
