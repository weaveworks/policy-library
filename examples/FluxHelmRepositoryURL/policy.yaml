apiVersion: pac.weave.works/v2beta2
kind: Policy
metadata:
  name: weave.policies.helm-repository-url-should-be-in-organization-domains
spec:
  id: weave.policies.helm-repository-url-should-be-in-organization-domains
  name: Helm Repo URL Should Be in Organisation Domain
  enabled: true
  description: "The URL of a Helm repository should only be from the specified organisation domain."
  how_to_solve: "Change the URL of the Helm repository to one that is from the organisation domain."
  category: weave.categories.security
  severity: high
  targets: {kinds: [HelmRepository]}
  tags: [flux]
  parameters:
    - name: organisation_domains
      type: array
      required: true
      value:
    - name: exclude_namespaces
      type: array
      required: false
      value: ["kube-system"]
    - name: exclude_label_key
      type: string
      required: false
      value:
    - name: exclude_label_value
      type: string
      required: false
      value:
  code: |
    package weave.advisor.helm_repo_url

    domains := input.parameters.organisation_domains
    exclude_namespaces := input.parameters.exclude_namespaces
    exclude_label_key := input.parameters.exclude_label_key
    exclude_label_value := input.parameters.exclude_label_value

    violation[result] {
        isExcludedNamespace == false
        repository_url := controller_spec.url
        not any(domain in domains; startswith(repository_url, sprintf("https://%s", [domain])))
        not exclude_label_value == controller_input.metadata.labels[exclude_label_key]
        result = {
            "issue detected": true,
            "msg": sprintf("The HelmRepo URL must be from one of the allowed domains '%s'; found '%s'", [domains, repository_url]),
            "violating_key": "spec.url"
        }
    }

    domain_matches(url, domains) {
        startswith(url, "https://")
        parts := split(url, "/")
        count(parts) > 2
        domain := parts[2]
        domain in domains
    }

    # Controller input
    controller_input = input.review.object

    # controller_container acts as an iterator to get containers from the template
    controller_spec = controller_input.spec {
      controller_input.kind == "HelmRepository"
    }

    contains_kind(kind, kinds) {
      kinds[_] = kind
    }

    isExcludedNamespace = true {
      controller_input.metadata.namespace
      controller_input.metadata.namespace in exclude_namespaces
    } else = false
