apiVersion: pac.weave.works/v2beta2
kind: Policy
metadata:
  name: weave.policies.bucket-approved-region
spec:
  id: weave.policies.bucket-approved-region
  name: Bucket Approved Region
  enabled: true
  description: "Bucket region must be one of the approved regions."
  how_to_solve: "Set the region of the Bucket to one of the approved regions."
  category: weave.categories.configuration
  severity: medium
  targets:
    kinds: [Bucket]
  tags: [flux]
  parameters:
    - name: regions
      type: array
      required: true
      value:
    - name: exclude_namespaces
      type: array
      required: false
      value: []
    - name: exclude_label_key
      type: string
      required: false
      value:
    - name: exclude_label_value
      type: string
      required: false
      value:
  code: |
    package weave.advisor.bucket_approved_region

    import future.keywords.in

    exclude_namespaces := input.parameters.exclude_namespaces
    exclude_label_key := input.parameters.exclude_label_key
    exclude_label_value := input.parameters.exclude_label_value
    regions := input.parameters.regions

    violation[result] {
        isExcludedNamespace == false
        not exclude_label_value == controller_input.metadata.labels[exclude_label_key]
        not controller_spec.region in regions
        result = {
            "issue detected": true,
            "msg": sprintf("The Bucket '%s' region must be one of the approved regions: %v; found '%s'", [controller_input.metadata.name, regions, controller_spec.region]),
            "violating_key": "spec.region"
        }
    }

    # Controller input
    controller_input = input.review.object

    # controller_spec acts as an iterator to get the spec from the input object
    controller_spec = controller_input.spec {
      controller_input.kind == "Bucket"
    }

    isExcludedNamespace = true {
        controller_input.metadata.namespace
        controller_input.metadata.namespace in exclude_namespaces
    } else = false
