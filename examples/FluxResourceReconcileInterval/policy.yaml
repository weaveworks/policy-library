apiVersion: pac.weave.works/v2beta2
kind: Policy
metadata:
  name: weave.policies.resource-reconcile-interval
spec:
  id: weave.policies.resource-reconcile-interval
  name: Resource Reconcile Interval Must Be Set Between Lower and Upper Bound
  enabled: true
  description: "The reconcile interval of a Resource must be set between a lower and upper bound, lower_bound & upper_bound must be in seconds ."
  how_to_solve: "Set the reconcile interval of the Resource between the specified lower and upper bounds."
  category: weave.categories.reliability
  severity: medium
  targets:
    kinds: [HelmRelease, GitRepository, OCIRepository, Bucket, HelmChart, HelmRepository, Kustomization]
  tags: [flux]
  parameters:
    - name: lower_bound
      type: integer
      required: true
      value: 1
    - name: upper_bound
      type: integer
      required: true
      value: 1000
    - name: exclude_namespaces
      type: array
      required: false
      value: []
    - name: exclude_label_key
      type: string
      required: false
      value: ""
    - name: exclude_label_value
      type: string
      required: false
      value: ""
  code: "package weave.advisor.resource_reconcile_interval\n\nimport future.keywords.in\n\nexclude_namespaces := input.parameters.exclude_namespaces\nexclude_label_key := input.parameters.exclude_label_key\nexclude_label_value := input.parameters.exclude_label_value\nlower_bound := input.parameters.lower_bound\nupper_bound := input.parameters.upper_bound\n\nviolation[result] {\n    isExcludedNamespace == false\n    not exclude_label_value == controller_input.metadata.labels[exclude_label_key]\n    reconcile_interval := parse_interval(controller_spec.interval)\n    reconcile_interval < lower_bound\n    result = {\n        \"issue_detected\": true,\n        \"msg\": sprintf(\"The resource '%s' of kind '%s' reconcile interval must be at least %d seconds; found %d\", [controller_input.metadata.name, controller_input.kind, lower_bound, reconcile_interval]),\n        \"violating_key\": \"spec.interval\"\n    }\n}\n\nviolation[result] {\n    isExcludedNamespace == false\n    reconcile_interval := parse_interval(controller_spec.interval)\n    not exclude_label_value == controller_input.metadata.labels[exclude_label_key]\n    reconcile_interval > upper_bound\n    result = {\n        \"issue_detected\": true,\n        \"msg\": sprintf(\"The resource '%s' of kind '%s' reconcile interval must be at most %d seconds; found %d\", [controller_input.metadata.name, controller_input.kind, upper_bound, reconcile_interval]),\n        \"violating_key\": \"spec.interval\"\n    }\n}\n\n# Controller input\ncontroller_input = input.review.object\n\ncontroller_spec = controller_input.spec {\n  contains_kind(controller_input.kind, [\"HelmRelease\", \"GitRepository\", \"OCIRepository\", \"Bucket\", \"HelmChart\", \"HelmRepository\", \"Kustomization\"])\n}\n\ncontains_kind(kind, kinds) {\nkinds[_] = kind\n}\n\nisExcludedNamespace = true {\n  controller_input.metadata.namespace\n  controller_input.metadata.namespace in exclude_namespaces\n} else = false\n\nparse_interval(interval) = seconds {\n    # Matches strings like 1h2m3s, 2m, 10s and extracts hours, minutes, and seconds\n    match_result := regex.find_n(`\\d+h|\\d+m|\\d+s`, interval, 3)\n    \n    # Calculate total seconds\n    total_seconds := sum([get_seconds_from_part(match) | match := match_result[_]])\n    \n    seconds = total_seconds\n}\n\n# Calculate seconds from part if present\nget_seconds_from_part(part) = seconds {\n    endswith(part, \"h\")\n    no_suffix := trim_suffix(part, \"h\")\n    seconds := to_number(no_suffix) * 3600\n} else = seconds {\n    endswith(part, \"m\")\n    no_suffix := trim_suffix(part, \"m\")\n    seconds := to_number(no_suffix) * 60\n} else = seconds {\n    endswith(part, \"s\")\n    no_suffix := trim_suffix(part, \"s\")\n    seconds := to_number(no_suffix)\n} else = seconds {\n    seconds := 0\n}\n"
