apiVersion: pac.weave.works/v2beta2
kind: Policy
metadata:
  name: weave.policies.resource-reconcile-interval
spec:
  id: weave.policies.resource-reconcile-interval
  name: Resource Reconcile Interval Must Be Set Between Lower and Upper Bound
  enabled: true
  description: "The reconcile interval of a Resource must be set between a lower and upper bound."
  how_to_solve: "Set the reconcile interval of the Resource between the specified lower and upper bounds."
  category: weave.categories.best_practices
  severity: medium
  targets:
    kinds: [HelmRelease, GitRepository, OCIRepository, Bucket, HelmChart, HelmRepository, Kustomization]
  tags: [flux]
  parameters:
    - name: lower_bound
      type: integer
      required: true
      value: 1
    - name: upper_bound
      type: integer
      required: true
      value: 1000
    - name: exclude_namespaces
      type: array
      required: false
      value: []
    - name: exclude_label_key
      type: string
      required: false
      value: ""
    - name: exclude_label_value
      type: string
      required: false
      value: ""
  code: |
    package weave.advisor.resource_reconcile_interval

    import future.keywords.in

    exclude_namespaces := input.parameters.exclude_namespaces
    exclude_label_key := input.parameters.exclude_label_key
    exclude_label_value := input.parameters.exclude_label_value
    lower_bound := input.parameters.lower_bound
    upper_bound := input.parameters.upper_bound

    violation[result] {
        isExcludedNamespace == false
        not exclude_label_value == controller_input.metadata.labels[exclude_label_key]
        reconcile_interval := controller_spec.interval
        reconcile_interval < lower_bound
        result = {
            "issue detected": true,
            "msg": sprintf("The resource '%s' of kind '%s' reconcile interval must be at least %d seconds; found %d", [controller_input.metadata.name, controller_input.kind, lower_bound, reconcile_interval]),
            "violating_key": "spec.interval"
        }
    }

    violation[result] {
        isExcludedNamespace == false
        reconcile_interval := controller_spec.interval
        not exclude_label_value == controller_input.metadata.labels[exclude_label_key]
        reconcile_interval > upper_bound
        result = {
            "issue detected": true,
            "msg": sprintf("The resource '%s' of kind '%s' reconcile interval must be at most %d seconds; found %d", [controller_input.metadata.name, controller_input.kind, upper_bound, reconcile_interval]),
            "violating_key": "spec.interval"
        }
    }

    # Controller input
    controller_input = input.review.object

    controller_spec = controller_input.spec {
      contains_kind(controller_input.kind, ["HelmRelease", "GitRepository", "OCIRepository", "Bucket", "HelmChart", "HelmRepository", "Kustomization"])
    }

    contains_kind(kind, kinds) {
    kinds[_] = kind
    }

    isExcludedNamespace = true {
      controller_input.metadata.namespace
      controller_input.metadata.namespace in exclude_namespaces
    } else = false
