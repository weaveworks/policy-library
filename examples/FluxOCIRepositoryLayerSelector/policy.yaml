apiVersion: pac.weave.works/v2beta2
kind: Policy
metadata:
  name: weave.policies.ocirepository-layer-selector
spec:
  id: weave.policies.ocirepository-layer-selector
  name: OCIRepository Layer Selector
  enabled: true
  description: "OCIRepository layer selector must only reference predefined media/operation type."
  how_to_solve: "Ensure the OCIRepository layer selector refers to a predefined media and operation type."
  category: weave.categories.best-practices
  severity: medium
  targets:
    kinds: [OCIRepository]
  tags: [flux]
  parameters:
    - name: media_types
      type: array
      required: true
      value:
    - name: operations
      type: array
      required: true
      value: ["extract"]
    - name: exclude_namespaces
      type: array
      required: false
      value: []
    - name: exclude_label_key
      type: string
      required: false
      value:
    - name: exclude_label_value
      type: string
      required: false
      value:
  code: |
    package weave.advisor.ocirepository_layer_selector

    import future.keywords.in

    media_types := input.parameters.media_types
    operations := input.parameters.operations
    exclude_namespaces := input.parameters.exclude_namespaces
    exclude_label_key := input.parameters.exclude_label_key
    exclude_label_value := input.parameters.exclude_label_value

    violation[result] {
        not isExcludedNamespace
        not exclude_label_value == controller_input.metadata.labels[exclude_label_key]
        mediaType := controller_spec.layerSelector.mediaType
        not mediaType in media_types
        result = {
            "issue_detected": true,
            "msg": sprintf("The OCIRepository '%s' has a non-predefined media type. Found: '%s'", [controller_input.metadata.name, mediaType]),
            "violating_key": "spec.layerSelector.mediaType"
        }
    }

    violation[result] {
        not isExcludedNamespace
        not exclude_label_value == controller_input.metadata.labels[exclude_label_key]
        operation := controller_spec.layerSelector.operation
        not operation in operations
        result = {
            "issue_detected": true,
            "msg": sprintf("The OCIRepository '%s' has a non-predefined operation. Found: '%s'", [controller_input.metadata.name, operation]),
            "violating_key": "spec.layerSelector.operation"
        }
    }

    controller_input = input.review.object

    controller_spec = controller_input.spec {
        controller_input.kind == "OCIRepository"
    }

    contains_kind(kind, kinds) {
        kinds[_] = kind
    }

    isExcludedNamespace = true {
        controller_input.metadata.namespace
        controller_input.metadata.namespace in exclude_namespaces
    } else = false

