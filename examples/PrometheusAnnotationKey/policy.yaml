apiVersion: pac.weave.works/v2beta1
kind: Policy
metadata:
  name: weave.templates.enforce-prometheus-annotation-key
spec:
  id: weave.templates.enforce-prometheus-annotation-key
  name: Enforce Prometheus Annotation Key
  description: |
    This Policy ensures annotation keys like `prometheus.io/scrape`, `prometheus.io/port`, or `prometheus.io/path` are set in your Policy's metadata annotation. This is based on the default configuration of Prometheus.
  how_to_solve: |
    Set annotation keys like `prometheus.io/scrape`, `prometheus.io/port`, or `prometheus.io/path`.
    ```
    spec:
      template:
        metadata:
          annotations:
            <prometheus_annotation_key>: "value"
    ```
    https://prometheus.io/docs/prometheus/latest/configuration/configuration/#pod
  category: weave.categories.observability
  severity: medium
  parameters:
    - name: prometheus_annotation_key
      type: string
      required: true
      value:
    - name: exclude_namespaces
      type: array
      required: false
      value:
    - name: exclude_label_key
      type: string
      required: false
      value:
    - name: exclude_label_value
      type: string
      required: false
      value:
  code: |
    package weave.advisor.annotations.prometheus_annotation_key

    import future.keywords.in

    annotation := input.parameters.prometheus_annotation_key
    exclude_namespaces := input.parameters.exclude_namespaces
    exclude_label_key := input.parameters.exclude_label_key
    exclude_label_value := input.parameters.exclude_label_value

    violation[result] {
      isExcludedNamespace == false
      not exclude_label_value == controller_input.metadata.labels[exclude_label_key]
      not controller_input.spec.template.metadata.annotations[annotation]
      result = {
        "issue detected": true,
        "msg": sprintf("'%v' annotation not found",[annotation]),
        "violating_key": "spec.template.metadata.annotation"
      }
    }

    # Controller input
    controller_input = input.review.object

    # controller_container acts as an iterator to get containers from the template
    controller_spec = controller_input.spec.template.spec {
      contains_kind(controller_input.kind, {"StatefulSet" , "DaemonSet", "Deployment", "Job"})
    } else = controller_input.spec {
      controller_input.kind == "Pod"
    } else = controller_input.spec.jobTemplate.spec.template.spec {
      controller_input.kind == "CronJob"
    }

    contains_kind(kind, kinds) {
      kinds[_] = kind
    }

    isExcludedNamespace = true {
    	controller_input.metadata.namespace
    	controller_input.metadata.namespace in exclude_namespaces
    } else = false
