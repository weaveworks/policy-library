apiVersion: magalix.com/v1
kind: Policy
metadata:
  name: magalix.policies.enforce-prometheus-annotation-key
spec:
  name: magalix.policies.enforce-prometheus-annotation-key
  description: |
    This Policy ensures annotation keys like `prometheus.io/scrape`, `prometheus.io/port`, or `prometheus.io/path` are set in your Policy's metadata annotation. This is based on the default configuration of Prometheus.
  how_to_solve: |
    Set annotation keys like `prometheus.io/scrape`, `prometheus.io/port`, or `prometheus.io/path`.
    ```
    spec:
      template:
        metadata:
          annotations:
            <prometheus_annotation_key>: "value"
    ```
    https://prometheus.io/docs/prometheus/latest/configuration/configuration/#pod
  category: magalix.categories.observability
  severity: medium
  parameters:
  - name: prometheus_annotation_key
    type: string
    required: true
    default:
  - name: exclude_namespace
    type: string
    required: false
    default:
  - name: exclude_label_key
    type: string
    required: false
    default:
  - name: exclude_label_value
    type: string
    required: false
    default:
  code: "package magalix.advisor.annotations.prometheus_annotation_key\n\nannotation\
    \ := input.parameters.prometheus_annotation_key\nexclude_namespace := input.parameters.exclude_namespace\n\
    exclude_label_key := input.parameters.exclude_label_key\nexclude_label_value :=\
    \ input.parameters.exclude_label_value\n\nviolation[result] {\n  not exclude_namespace\
    \ == controller_input.metadata.namespace\n  not exclude_label_value == controller_input.metadata.labels[exclude_label_key]\n\
    \  not controller_input.spec.template.metadata.annotations[annotation]\n  result\
    \ = {\n    \"issue detected\": true,\n    \"msg\": sprintf(\"'%v' annotation not\
    \ found\",[annotation]),\n    \"violating_key\": \"spec.template.metadata.annotation\"\
    \n  }\n}\n\n# Controller input\ncontroller_input = input.review.object\n\n# controller_container\
    \ acts as an iterator to get containers from the template\ncontroller_spec = controller_input.spec.template.spec\
    \ {\n  contains_kind(controller_input.kind, {\"StatefulSet\" , \"DaemonSet\",\
    \ \"Deployment\", \"Job\"})\n} else = controller_input.spec {\n  controller_input.kind\
    \ == \"Pod\"\n} else = controller_input.spec.jobTemplate.spec.template.spec {\n\
    \  controller_input.kind == \"CronJob\"\n}\n\ncontains_kind(kind, kinds) {\n \
    \ kinds[_] = kind\n}\n"
