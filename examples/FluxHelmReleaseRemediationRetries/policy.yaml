apiVersion: pac.weave.works/v2beta2
kind: Policy
metadata:
  name: weave.policies.helm-release-remediation-retries
spec:
  id: weave.policies.helm-release-remediation-retries
  name: Helm Release Remediation Retries
  enabled: true
  description: "HelmRelease remediation retries must be within the specified lower and upper bounds."
  how_to_solve: "Set the remediation retries value of the HelmRelease to a value within the allowed range."
  category: weave.categories.reliability
  severity: medium
  targets:
    kinds: [HelmRelease]
  tags: [flux]
  parameters:
    - name: lower_bound
      type: integer
      required: true
      value: 1
    - name: upper_bound
      type: integer
      required: true
      value: 10
    - name: exclude_namespaces
      type: array
      required: false
      value: []
    - name: exclude_label_key
      type: string
      required: false
      value:
    - name: exclude_label_value
      type: string
      required: false
      value:
  code: |
    package weave.advisor.helm_release_remediation_retries

    import future.keywords.in

    exclude_namespaces := input.parameters.exclude_namespaces
    exclude_label_key := input.parameters.exclude_label_key
    exclude_label_value := input.parameters.exclude_label_value
    lower_bound := input.parameters.lower_bound
    upper_bound := input.parameters.upper_bound

    # Violation for install remediation retries lower_bound
    violation[result] {
        not isExcludedNamespace
        not exclude_label_value == controller_input.metadata.labels[exclude_label_key]
        retries := controller_spec.install.remediation.retries
        not is_null(retries)
        retries < lower_bound
        result = {
            "issue_detected": true,
            "msg": sprintf("The HelmRelease '%s' install remediation retries must be between %d and %d; found %d", [controller_input.metadata.name, lower_bound, upper_bound, retries]),
            "violating_key": "spec.install.remediation.retries"
        }
    }

    # Violation for install remediation retries upper_bound
    violation[result] {
        not isExcludedNamespace
        not exclude_label_value == controller_input.metadata.labels[exclude_label_key]
        retries := controller_spec.install.remediation.retries
        not is_null(retries)
        retries > upper_bound
        result = {
            "issue_detected": true,
            "msg": sprintf("The HelmRelease '%s' install remediation retries must be between %d and %d; found %d", [controller_input.metadata.name, lower_bound, upper_bound, retries]),
            "violating_key": "spec.install.remediation.retries"
        }
    }

    # Violation for upgrade remediation retries lower_bound
    violation[result] {
        not isExcludedNamespace
        not exclude_label_value == controller_input.metadata.labels[exclude_label_key]
        retries := controller_spec.upgrade.remediation.retries
        not is_null(retries)
        retries < lower_bound
        result = {
            "issue_detected": true,
            "msg": sprintf("The HelmRelease '%s' upgrade remediation retries must be between %d and %d; found %d", [controller_input.metadata.name, lower_bound, upper_bound, retries]),
            "violating_key": "spec.upgrade.remediation.retries"
        }
    }

    # Violation for upgrade remediation retries upper_bound
    violation[result] {
        not isExcludedNamespace
        not exclude_label_value == controller_input.metadata.labels[exclude_label_key]
        retries := controller_spec.upgrade.remediation.retries
        not is_null(retries)
        retries > upper_bound
        result = {
            "issue_detected": true,
            "msg": sprintf("The HelmRelease '%s' upgrade remediation retries must be between %d and %d; found %d", [controller_input.metadata.name, lower_bound, upper_bound, retries]),
            "violating_key": "spec.upgrade.remediation.retries"
        }
    }

    # Controller input
    controller_input = input.review.object

    controller_spec = controller_input.spec {
        controller_input.kind == "HelmRelease"
    }

    contains_kind(kind, kinds) {
      kinds[_] = kind
    }

    isExcludedNamespace = true {
        controller_input.metadata.namespace
        controller_input.metadata.namespace in exclude_namespaces
    } else = false
