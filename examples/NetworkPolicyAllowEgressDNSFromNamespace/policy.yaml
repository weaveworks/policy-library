apiVersion: magalix.com/v1
kind: Policy
metadata:
  name: magalix.policies.network-allow-egress-dns-to-coredns
spec:
  enable: true
  name: magalix.policies.network-allow-egress-dns-to-coredns
  description: |
    If you are using a CNI that allows for Network Policies, you can use this Policy to allow egress traffic from a specified namespace, to your coredns pods with the label `k8s-app: kube-dns`. The Policy specifically looks for port UDP 53. 

    By default, if no policies exist in a namespace, then all ingress and egress traffic is allowed to and from pods in that namespace. 
  how_to_solve: |
    You must specifiy a source namespace to allow Egress to coredns on UDP53. 

    ```
    ...
    metadata:
      namespace: <namespace>
    ...
    ```
    and
    ```
    ...
    egress:
    - to:
      - podSelector:
          matchLabels:
            k8s-app: kube-dns
    ...
    ```

    https://kubernetes.io/docs/concepts/services-networking/network-policies/#targeting-a-namespace-by-its-name
  category: magalix.categories.network-security
  severity: medium
  controls:
  - magalix.controls.pci-dss.1.2.1
  - magalix.controls.soc2-type1.1.6.1
  parameters:
  - name: namespace
    type: string
    required: true
    default:
  - name: exclude_label_key
    type: string
    required: false
    default:
  - name: exclude_label_value
    type: string
    required: false
    default:
  code: "package magalix.advisor.network.allow.egress.to.coredns\n\nnamespace := input.parameters.namespace\n\
    exclude_label_key := input.parameters.exclude_label_key\nexclude_label_value :=\
    \ input.parameters.exclude_label_value\n\nviolation[result] {\n  not exclude_label_value\
    \ == np_input.metadata.labels[exclude_label_key]\n  namespace == np_input.metadata.namespace\n\
    \  some i, j, k\n  egress := np_input.spec.egress[i]\n  ports := egress.ports[j]\n\
    \  ports.protocol == \"UDP\"\n  ports.port = 53\n  to := egress.to[k]\n  to_key\
    \ := to.podSelector.matchLabels\n  not has_key(to_key, \"k8s-app\")\n  result\
    \ = {\n    \"issue_detected\": true,\n    \"msg\": sprintf(\"Expecting key 'k8s-app',\
    \ but '%v' was detected\", [to_key]),\n    \"violating_key\": sprintf(\"spec.egress[%v].to[%v].podSelector.matchLabels\"\
    , [i,k])\n  }\n}\n\nviolation[result] {\n  not exclude_label_value == np_input.metadata.labels[exclude_label_key]\n\
    \  namespace == np_input.metadata.namespace\n  some i, j, k\n  egress := np_input.spec.egress[i]\n\
    \  ports := egress.ports[j]\n  ports.protocol == \"UDP\"\n  ports.port = 53\n\
    \  to := egress.to[k]\n  to_value := to.podSelector.matchLabels[\"k8s-app\"]\n\
    \  not \"kube-dns\" == to_value\n  result = {\n    \"issue_detected\": true,\n\
    \    \"msg\": sprintf(\"Expecting value 'kube-dns', but '%v' was detected\", [to_value]),\n\
    \    \"violating_key\": sprintf(\"spec.egress[%v].to[%v].podSelector.matchLabels.k8s-app\"\
    , [i,k]),\n    \"recommended_value\": \"kube-dns\"\n  }\n}\n\nhas_key(x, k) {\
    \ \n  type_name(x[k])\n}\n\nnp_input = input.review.object {\n  contains_kind(input.review.object.kind,\
    \ {\"NetworkPolicy\"})\n}\n\ncontains_kind(kind, kinds) {\n  kinds[_] = kind\n\
    }"
