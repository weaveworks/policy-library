apiVersion: magalix.com/v1
kind: Policy
metadata:
  name: magalix.policies.kubernetes-minimum-kubelet-version
spec:
  id: magalix.policies.kubernetes-minimum-kubelet-version
  name: Kubernetes Minimum Kubelet Version
  description: |
    This Policy checks the minimum kubelet version for your Nodes. Please use this type of versioning (`v1.0.0`) and omit any suffix starting with a hyphen (`-`)
  how_to_solve: |
    Upgrade your kubelet to a version that is equal to or later than the version specified in the policy. 
    ```
    nodeInfo:
      kubeletVersion: <version>
    ```
  category: magalix.categories.organizational-standards
  severity: medium
  parameters:
  - name: version
    type: string
    required: true
    default:
  code: "package magalix.advisor.k8s.min_kubelet_version\n\nversion := input.parameters.version\n\
    \nviolation[result] {\n  kubelet_version := node_input.status.nodeInfo.kubeletVersion\n\
    \  semantic_version := split_version(kubelet_version)\n  your_version := split_version(version)\n\
    \  verify := semver.compare(semantic_version, your_version)\n  verify < 0\n  result\
    \ = {\n \t\"issue_detected\": true,\n    \"msg\": sprintf(\"Minimum version must\
    \ be '%v'; found version 'v%v'\", [version, semantic_version]),\n    \"violating_key\"\
    : \"status.nodeInfo.kubeletVersion\"\n  }\n}\n\nsplit_version(k_ver) = ver {\n\
    \  split_vers := split(k_ver, \"-\")\n  ver := trim_left(split_vers[0], \"v\"\
    )\n}\n\nnode_input = input.review.object {\n\tcontains_kind(input.review.object.kind,\
    \ {\"Node\"})\n}\n\ncontains_kind(kind, kinds) {\n  kinds[_] = kind\n}\n\n"
