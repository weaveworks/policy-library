apiVersion: pac.weave.works/v2beta2
kind: Policy
metadata:
  name: weave.policies.kustomization-kubeconfig
spec:
  id: weave.policies.kustomization-kubeconfig
  name: Kustomization Kubeconfig
  enabled: true
  description: "spec.Kubeconfig cannot reference remote cluster from excludedClustersList[]."
  how_to_solve: "Set the Kustomization's spec.Kubeconfig to a cluster that is not in the excludedClustersList[]."
  category: weave.categories.configuration
  severity: medium
  targets:
    kinds: [Kustomization]
  tags: [flux]
  parameters:
    - name: excluded_clusters
      type: array
      required: true
      value:
    - name: exclude_namespaces
      type: array
      required: false
      value:
    - name: exclude_label_key
      type: string
      required: false
      value:
    - name: exclude_label_value
      type: string
      required: false
      value:
  code: |
    package weave.advisor.kustomization_kubeconfig

    import future.keywords.in

    exclude_namespaces := input.parameters.exclude_namespaces
    exclude_label_key := input.parameters.exclude_label_key
    exclude_label_value := input.parameters.exclude_label_value
    excluded_clusters := input.parameters.excluded_clusters

    violation[result] {
        isExcludedNamespace == false
        not exclude_label_value == controller_input.metadata.labels[exclude_label_key]
        kubeconfig := controller_spec.kubeConfig
        excluded_clusters[_] == kubeconfig
        result = {
            "issue detected": true,
            "msg": sprintf("The Kustomization '%s' spec.Kubeconfig cannot reference remote cluster from excludedClustersList: %v; found '%s'", [controller_input.metadata.name, excluded_clusters, kubeconfig]),
            "violating_key": "spec.kubeConfig"
        }
    }

    controller_input = input.review.object

    controller_spec = controller_input.spec {
      controller_input.kind == "Kustomization"
    }

    contains_kind(kind, kinds) {
      kinds[_] = kind
    }

    isExcludedNamespace = true {
      controller_input.metadata.namespace
      controller_input.metadata.namespace in exclude_namespaces
    } else = false

