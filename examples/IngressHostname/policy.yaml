apiVersion: pac.weave.works/v2beta2
kind: Policy
metadata:
  name: weave.templates.ingress-approved-hostnames
spec:
  id: weave.templates.ingress-approved-hostnames
  name: Ingress Approved Hostnames
  description: "This Policy ensures only hostnames that are approved are set. Specify a list of approved hostnames since you may be hosting more than one domain name. \n"
  how_to_solve: |
    Ensure your domain name is the same as the one you are hosting.
    ```
    spec:
      rules:
      - host: <hostnames>
    ```
  category: weave.categories.network-security
  severity: high
  parameters:
    - name: hostnames
      type: array
      required: true
      value:
    - name: exclude_namespaces
      type: array
      required: false
      value:
    - name: exclude_label_key
      type: string
      required: false
      value:
    - name: exclude_label_value
      type: string
      required: false
      value:
  code: |
    package weave.advisor.ingress.approved_hostnames

    import future.keywords.in

    hostnames := input.parameters.hostnames
    exclude_namespaces := input.parameters.exclude_namespaces
    exclude_label_key := input.parameters.exclude_label_key
    exclude_label_value := input.parameters.exclude_label_value

    violation[result] {
      isExcludedNamespace == false
      not exclude_label_value == controller_input.metadata.labels[exclude_label_key]
      some i
      rules := ingress_spec.rules[i]
      hosts := rules.host
      not array_contains(hostnames, hosts)
      result = {
        "issue detected": true,
        "msg": sprintf("Approved domain names should be '%v'; detected '%v'", [hostnames, hosts]),
        "violating_key": sprintf("spec.rules[%v].host", [i])
      }
    }

    array_contains(array, element) {
      array[_] = element
    }

    # Controller input
    controller_input = input.review.object

    ingress_spec = input.review.object.spec {
      contains_kind(input.review.object.kind, {"Ingress"})
    }

    contains_kind(kind, kinds) {
      kinds[_] = kind
    }


    isExcludedNamespace = true {
    	controller_input.metadata.namespace
    	controller_input.metadata.namespace in exclude_namespaces
    } else = false
