apiVersion: pac.weave.works/v2beta1
kind: Policy
metadata:
  name: weave.templates.container-minimum-cpu-limits
spec:
  id: weave.templates.container-minimum-cpu-limits
  name: Container Minimum CPU Limits
  description: |
    This Policy is to ensure a minimum CPU Limit value is set. The policy will fail if the set CPU limit is lower than the one specified in the policy. You must specify a unit size (m, g, etc).
  how_to_solve: |
    ```
    ...
      spec:
        containers:
        - resources:
            limits:
              cpu: <size>
    ```
    https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
  category: weave.categories.capacity-management
  severity: medium
  standards:
    - id: weave.standards.soc2-type-i
      controls:
        - weave.controls.soc2-type-i.2.1.1
  parameters:
    - name: size
      type: string
      required: true
      value:
    - name: exclude_namespaces
      type: array
      required: false
      value:
    - name: exclude_label_key
      type: string
      required: false
      value:
    - name: exclude_label_value
      type: string
      required: false
      value:
  code: "package weave.advisor.controller.min_cpu_limits\n\nimport future.keywords.in\n\nmin_size := input.parameters.size\nexclude_namespaces := input.parameters.exclude_namespaces\nexclude_label_key := input.parameters.exclude_label_key\nexclude_label_value := input.parameters.exclude_label_value\n\nviolation[result] {\n  isExcludedNamespace == false\n  not exclude_label_value == controller_input.metadata.labels[exclude_label_key]\n  some i\n  container := controller_spec.containers[i]\n  cpu_limits := container.resources.limits.cpu\n  cpu_limits_value := units.parse_bytes(cpu_limits)\n  min_size_value := units.parse_bytes(min_size)\n  cpu_limits_value < min_size_value\n  result = {\n    \"issue detected\": true,\n    \"msg\": sprintf(\"CPU limits must be a minimum of '%v'; found '%v'\", [min_size, cpu_limits]),\n    \"violating_key\": \"spec.template.spec.containers.resources.limits.cpu\"  \n  }\n}\n\n# Controller input\ncontroller_input = input.review.object\n\n# controller_container acts as an iterator to get containers from the template\ncontroller_spec = controller_input.spec.template.spec {\n  contains_kind(controller_input.kind, {\"StatefulSet\" , \"DaemonSet\", \"Deployment\", \"Job\"})\n} else = controller_input.spec {\n  controller_input.kind == \"Pod\"\n} else = controller_input.spec.jobTemplate.spec.template.spec {\n  controller_input.kind == \"CronJob\"\n}\n\ncontains_kind(kind, kinds) {\n  kinds[_] = kind\n}\n\nisExcludedNamespace = true {\n\tcontroller_input.metadata.namespace\n\tcontroller_input.metadata.namespace in exclude_namespaces\n} else = false\n"
