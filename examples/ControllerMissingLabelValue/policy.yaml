apiVersion: pac.weave.works/v2beta1
kind: Policy
metadata:
  name: weave.templates.metadata-missing-label-and-value
spec:
  id: weave.templates.metadata-missing-label-and-value
  name: Metadata Missing Label And Value
  description: "Custom labels can help enforce organizational standards for each artifact deployed. This Policy ensures a key and value are set in the entity's `metadata.labels` path. The Policy detects the presence of the following: \n\n### label\nA label key of your choosing. \n\n### value\nA label value of your choosing.\n"
  how_to_solve: "Add a custom label and value to `metadata.labels`.\n\n```\nmetadata:\n  labels:\n    <label>: <value>\n```  \nFor additional information, please check\n* https://kubernetes.io/docs/concepts/overview/working-with-objects/common-labels \n"
  category: weave.categories.organizational-standards
  severity: low
  parameters:
    - name: label
      type: string
      required: true
      value:
    - name: value
      type: string
      required: true
      value:
    - name: exclude_namespaces
      type: array
      required: false
      value:
    - name: exclude_label_key
      type: string
      required: false
      value:
    - name: exclude_label_value
      type: string
      required: false
      value:
  code: |
    package weave.advisor.labels.missing_label_value

    import future.keywords.in

    label := input.parameters.label
    value := input.parameters.value
    exclude_namespaces := input.parameters.exclude_namespaces
    exclude_label_key := input.parameters.exclude_label_key
    exclude_label_value := input.parameters.exclude_label_value


    violation[result] {
      isExcludedNamespace == false
      not exclude_label_value == controller_input.metadata.labels[exclude_label_key]
      # Filter the type of entity before moving on since this shouldn't apply to all entities
      contains_kind(controller_input.kind, {"StatefulSet" , "DaemonSet", "Deployment", "Job"})
      not value == controller_input.metadata.labels[label]
      result = {
        "issue detected": true,
        "msg": sprintf("The key:value pair '%v:%v' was not found; detected labels: '%v", [label, value, controller_input.metadata.labels]),
        "violating_key": sprintf("metadata.labels.%v", [label]),
        "recommended_value": value
      }
    }

    # Controller input
    controller_input = input.review.object

    contains_kind(kind, kinds) {
      kinds[_] = kind
    }

    isExcludedNamespace = true {
    	controller_input.metadata.namespace
    	controller_input.metadata.namespace in exclude_namespaces
    } else = false
