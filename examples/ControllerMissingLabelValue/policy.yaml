apiVersion: magalix.com/v1
kind: Policy
metadata:
  name: magalix.policies.metadata-missing-label-and-value
spec:
  enable: true
  name: magalix.policies.metadata-missing-label-and-value
  description: |
    Custom labels can help enforce organizational standards for each artifact deployed. This Policy ensures a key and value are set in the entity's `metadata.labels` path. The Policy detects the presence of the following: 

    ### label
    A label key of your choosing. 

    ### value
    A label value of your choosing.
  how_to_solve: |
    Add a custom label and value to `metadata.labels`.

    ```
    metadata:
      labels:
        <label>: <value>
    ```  
    For additional information, please check
    * https://kubernetes.io/docs/concepts/overview/working-with-objects/common-labels 
  category: magalix.categories.organizational-standards
  severity: low
  parameters:
  - name: label
    type: string
    required: true
    default:
  - name: value
    type: string
    required: true
    default:
  - name: exclude_namespace
    type: string
    required: false
    default:
  - name: exclude_label_key
    type: string
    required: false
    default:
  - name: exclude_label_value
    type: string
    required: false
    default:
  code: "package magalix.advisor.labels.missing_label_value\n\nlabel := input.parameters.label\n\
    value := input.parameters.value\nexclude_namespace := input.parameters.exclude_namespace\n\
    exclude_label_key := input.parameters.exclude_label_key\nexclude_label_value :=\
    \ input.parameters.exclude_label_value\n\n\nviolation[result] {\n  not exclude_namespace\
    \ == controller_input.metadata.namespace\n  not exclude_label_value == controller_input.metadata.labels[exclude_label_key]\n\
    \  # Filter the type of entity before moving on since this shouldn't apply to\
    \ all entities\n  contains_kind(controller_input.kind, {\"StatefulSet\" , \"DaemonSet\"\
    , \"Deployment\", \"Job\"})\n  not value == controller_input.metadata.labels[label]\n\
    \  result = {\n    \"issue detected\": true,\n    \"msg\": sprintf(\"The key:value\
    \ pair '%v:%v' was not found; detected labels: '%v\", [label, value, controller_input.metadata.labels]),\n\
    \    \"violating_key\": sprintf(\"metadata.labels.%v\", [label]),\n    \"recommended_value\"\
    : value\n  }\n}\n\n# Controller input\ncontroller_input = input.review.object\n\
    \ncontains_kind(kind, kinds) {\n  kinds[_] = kind\n}"
