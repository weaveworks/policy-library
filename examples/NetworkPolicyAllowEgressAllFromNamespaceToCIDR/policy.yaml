apiVersion: pac.weave.works/v2beta1
kind: Policy
metadata:
  name: weave.templates.network-allow-all-egress-traffic-from-namespace-to-cidr-block
spec:
  id: weave.templates.network-allow-all-egress-traffic-from-namespace-to-cidr-block
  name: Network Allow All Egress Traffic From Namespace To CIDR Block
  description: "If you are using a CNI that allows for Network Policies, you can use this Policy to block all Egress traffic from a specified namespace to a CIDR block of IP addresses. \n\nBy default, if no policies exist in a namespace, then all ingress and egress traffic is allowed to and from pods in that namespace. \n"
  how_to_solve: "Validate your use case and check network policies for traffic blocking. \n\nhttps://kubernetes.io/docs/concepts/services-networking/network-policies/\n"
  category: weave.categories.network-security
  severity: medium
  standards:
    - id: weave.standards.pci-dss
      controls:
        - weave.controls.pci-dss.1.2.1
    - id: weave.standards.mitre-attack
      controls:
        - weave.controls.mitre-attack.8.3
    - id: weave.standards.soc2-type-i
      controls:
        - weave.controls.soc2-type-i.1.6.1
  parameters:
    - name: namespace
      type: string
      required: true
      value:
    - name: cidr
      type: string
      required: true
      value:
    - name: exclude_label_key
      type: string
      required: false
      value:
    - name: exclude_label_value
      type: string
      required: false
      value:
  code: |-
    package weave.advisor.network.allow.egress.from.namespace.to.cidr

    namespace := input.parameters.namespace
    cidr := input.parameters.cidr
    exclude_label_key := input.parameters.exclude_label_key
    exclude_label_value := input.parameters.exclude_label_value

    violation[result] {
      not exclude_label_value == np_input.metadata.labels[exclude_label_key]
      namespace == np_input.metadata.namespace
      some i, j
      spec_egress := np_input.spec.egress[i]
      egress_to := spec_egress.to[j]
      cidr_block := egress_to.ipBlock.cidr
      not cidr == cidr_block
      result = {
        "issue_detected": true,
        "msg": sprintf("CIDR block should be '%v'; but %v was detected", [cidr, cidr_block]),
        "violating_key": sprintf("spec.egress[%v].to[%v].ipBlock.cidr", [i,j])
      }
    }

    np_input = input.review.object {
      contains_kind(input.review.object.kind, {"NetworkPolicy"})
    }

    contains_kind(kind, kinds) {
      kinds[_] = kind
    }
