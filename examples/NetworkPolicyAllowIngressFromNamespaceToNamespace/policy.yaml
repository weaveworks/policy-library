apiVersion: pac.weave.works/v2beta1
kind: Policy
metadata:
  name: weave.templates.network-allow-ingress-traffic-from-namespace-to-another
spec:
  id: weave.templates.network-allow-ingress-traffic-from-namespace-to-another
  name: Network Allow Ingress Traffic From Namespace To Another
  description: "If you are using a CNI that allows for Network Policies, you can use this Policy to allow Ingress traffic from one namespace to another.\n\nBy default, if no policies exist in a namespace, then all ingress and egress traffic is allowed to and from pods in that namespace. \n"
  how_to_solve: "Validate your use case and check network policies for traffic blocking. \n\nhttps://kubernetes.io/docs/concepts/services-networking/network-policies/\n"
  category: weave.categories.network-security
  severity: medium
  standards:
    - id: weave.standards.soc2-type-i
      controls:
        - weave.controls.soc2-type-i.1.6.1
  parameters:
    - name: src_namespace
      type: string
      required: true
      value:
    - name: dst_namespace
      type: string
      required: true
      value:
    - name: exclude_label_key
      type: string
      required: false
      value:
    - name: exclude_label_value
      type: string
      required: false
      value:
  code: |-
    package weave.advisor.network.allow.ingress.from_namespace_to_namespace

    src_namespace := input.parameters.src_namespace
    dst_namespace := input.parameters.dst_namespace
    exclude_label_key := input.parameters.exclude_label_key
    exclude_label_value := input.parameters.exclude_label_value

    violation[result] {
      not exclude_label_value == np_input.metadata.labels[exclude_label_key]
      dst_namespace == np_input.metadata.namespace
      some i, j
      ingress := np_input.spec.ingress[i]
      from := ingress.from[j]
      not src_namespace == from.namespaceSelector.matchLabels["kubernetes.io/metadata.name"]
      result = {
        "issue_detected": true,
        "msg": sprintf("spec.ingress[%v].from[%v].namespaceSelector does not match the namespace %v;", [i, j, src_namespace]),
        "violating_key": sprintf("spec.ingress[%v].from[%v].namespaceSelector", [i, j])
      }
    }

    violation[result] {
      not exclude_label_value == np_input.metadata.labels[exclude_label_key]
      dst_namespace == np_input.metadata.namespace
      np_input.spec.ingress == [{}]
      result = {
        "issue_detected": true,
        "msg": sprintf("spec.ingress allows all ingress. It should have a specific 'from' role for the namespace %v;", [src_namespace]),
        "violating_key": "spec.ingress"
      }
    }

    np_input = input.review.object {
      contains_kind(input.review.object.kind, {"NetworkPolicy"})
    }

    contains_kind(kind, kinds) {
      kinds[_] = kind
    }
