apiVersion: pac.weave.works/v2beta2
kind: Policy
metadata:
  name: weave.templates.antiaffinity-pod-simple
spec:
  id: weave.templates.antiaffinity-pod-simple
  name: Antiaffinity Pod Simple
  description: "This Policy sets antiPodAffinity keys, regardless of the Anti Pod Affinity scheduling type. List out the keys you want to check for. This Policy supports the following Pod Anti-Affinity types:\n- preferredDuringSchedulingIgnoredDuringExecution \n- requiredDuringSchedulingIgnoredDuringExecution \n\nThere is 1 parameter for this Policy:\n- keys (array) : The policy will check for `key` you are basing the anti-affinty on. \n"
  how_to_solve: "When working with Pod Anti-Affinity, this Policy will traverse through the entity and find the proper keys, regardless of pod affinity type. The follwing is an example of where the key is located. \n```\n...\n  spec:\n    podAntiAffinity:\n      preferredDuringSchedulingIgnoredDuringExecution:\n      - podAffinityTerm:\n          labelSelector:\n            matchExpressions:\n            - key: <keys>\n```       \nhttps://kubernetes.io/docs/concepts/scheduling-eviction/assign-pod-node/\nhttps://kubernetes.io/docs/reference/kubernetes-api/workload-resources/pod-v1/#PodAffinity\n"
  category: weave.categories.capacity-management
  severity: medium
  standards:
    - id: weave.standards.soc2-type-i
      controls:
        - weave.controls.soc2-type-i.2.1.1
  parameters:
    - name: keys
      type: array
      required: true
      value:
    - name: exclude_namespaces
      type: array
      required: false
      value:
    - name: exclude_label_key
      type: string
      required: false
      value:
    - name: exclude_label_value
      type: string
      required: false
      value:
  code: |
    package weave.advisor.antiaffinity.pods

    import future.keywords.in

    keys := input.parameters.keys
    exclude_namespaces := input.parameters.exclude_namespaces
    exclude_label_key := input.parameters.exclude_label_key
    exclude_label_value := input.parameters.exclude_label_value

    violation[result] {
      isExcludedNamespace == false
      not exclude_label_value == controller_input.metadata.labels[exclude_label_key]
      walk(controller_spec.affinity.podAntiAffinity, [path, value])
      key := path[count(path) - 1]
      key == "key"
      not array_contains(keys, value)
      result = {
        "issue_detected": true,
        "msg": sprintf("Expecting key '%v'; detected '%v'", [keys, value]),
        "violating_key": "spec.template.spec.affinity.podAntiAffinity"
      }
    }

    array_contains(array, element) {
      array[_] = element
    }

    # Controller input
    controller_input = input.review.object

    # controller_container acts as an iterator to get containers from the template
    controller_spec = controller_input.spec.template.spec {
      contains_kind(controller_input.kind, {"StatefulSet" , "DaemonSet", "Deployment", "Job"})
    } else = controller_input.spec {
      controller_input.kind == "Pod"
    } else = controller_input.spec.jobTemplate.spec.template.spec {
      controller_input.kind == "CronJob"
    }

    contains_kind(kind, kinds) {
      kinds[_] = kind
    }

    isExcludedNamespace = true {
    	controller_input.metadata.namespace
    	controller_input.metadata.namespace in exclude_namespaces
    } else = false
