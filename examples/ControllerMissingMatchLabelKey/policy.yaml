apiVersion: magalix.com/v1
kind: Policy
metadata:
  name: magalix.policies.missing-matchlabels-key
spec:
  id: magalix.policies.missing-matchlabels-key
  name: Missing Matchlabels Key
  description: |
    This Policy will enforce a custom match label key in `spec.selector`.
  how_to_solve: |
    Add a custom label to `matchLabels`. 
    ```
    ...
      spec:
        selector:
          matchLabels:
            <label>: value
    ```
    https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/#resources-that-support-set-based-requirements
  category: magalix.categories.organizational-standards
  severity: low
  parameters:
  - name: label
    type: string
    required: true
    default:
  - name: exclude_namespace
    type: string
    required: false
    default:
  - name: exclude_label_key
    type: string
    required: false
    default:
  - name: exclude_label_value
    type: string
    required: false
    default:
  code: "package magalix.advisor.labels.missing_matchlabel\n\nlabel := input.parameters.label\n\
    exclude_namespace := input.parameters.exclude_namespace\nexclude_label_key :=\
    \ input.parameters.exclude_label_key\nexclude_label_value := input.parameters.exclude_label_value\n\
    \nviolation[result] {\n  not exclude_namespace == controller_input.metadata.namespace\n\
    \  not exclude_label_value == controller_input.metadata.labels[exclude_label_key]\n\
    \  selector_label := controller_spec.selector.matchLabels\n  not has_key(selector_label,\
    \ label)\n  result = {\n    \"issue detected\": true,\n    \"msg\": sprintf(\"\
    Expecting key '%v'; found '%v'\", [label, selector_label]),\n    \"violating_key\"\
    : \"spec.selector.matchLabels\"  \n  }\n}\n\nhas_key(x, k) { \n  type_name(x[k])\n\
    }\n\n# Controller input\ncontroller_input = input.review.object\n\n# controller_container\
    \ acts as an iterator to get containers from the template\ncontroller_spec = controller_input.spec\
    \ {\n  contains_kind(controller_input.kind, {\"StatefulSet\" , \"DaemonSet\",\
    \ \"Deployment\", \"Job\"})\n} else = controller_input.spec {\n  controller_input.kind\
    \ == \"Pod\"\n} else = controller_input.spec.jobTemplate.spec {\n  controller_input.kind\
    \ == \"CronJob\"\n}\n\ncontains_kind(kind, kinds) {\n  kinds[_] = kind\n}\n"
