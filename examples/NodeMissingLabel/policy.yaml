apiVersion: pac.weave.works/v2beta2
kind: Policy
metadata:
  name: weave.templates.node-missing-label
spec:
  id: weave.templates.node-missing-label
  name: Node Missing Label
  description: |
    This Policy only looks for specific node label keys.

    Important node labels include:
    ### kubernetes.io/hostname
    The Kubelet populates this label with the hostname. Note that the hostname can be changed from the "actual" hostname by passing the --hostname-override flag to the kubelet.

    ### kubernetes.io/arch
    The Kubelet populates this with runtime.GOARCH as defined by Go. This can be handy if you are mixing arm and x86 nodes.

    ### node.kubernetes.io/instance-type
    The Kubelet populates this with the instance type as defined by the cloudprovider. This will be set only if you are using a cloudprovider. This setting is handy if you want to target certain workloads to certain instance types, but typically you want to rely on the Kubernetes scheduler to perform resource-based scheduling. You should aim to schedule based on properties rather than on instance types (for example: require a GPU, instead of requiring a g2.2xlarge).

    ### kubernetes.io/os
    The Kubelet populates this with runtime.GOOS as defined by Go. This can be handy if you are mixing operating systems in your cluster (for example: mixing Linux and Windows nodes).

    ### topology.kubernetes.io/zone
    The kubelet or the external cloud-controller-manager populates this with the information as provided by the cloudprovider. This will be set only if you are using a cloudprovider. However, you should consider setting this on nodes if it makes sense in your topology.
  how_to_solve: "Ensure the label is as specified in the Policy. \n```\nmetadata: \n  labels: \n    <key>: value\n```\nhttps://kubernetes.io/docs/reference/labels-annotations-taints/\n"
  category: weave.categories.organizational-standards
  severity: low
  standards:
    - id: weave.standards.nist-800-190
      controls:
        - weave.controls.nist-800-190.4.5.1
  parameters:
    - name: node_label
      type: string
      required: true
      value:
    - name: exclude_label_key
      type: string
      required: false
      value:
    - name: exclude_label_value
      type: string
      required: false
      value:
  code: |-
    package weave.advisor.nodes.label

    label := input.parameters.node_label
    exclude_label_key := input.parameters.exclude_label_key
    exclude_label_value := input.parameters.exclude_label_value

    violation[result] {
      not exclude_label_value == node_metadata.labels[exclude_label_key]
    	node_labels := node_metadata.labels
    	not node_labels[label]
      result = {
        "issue_detected": true,
        "msg": sprintf("Node is missing label '%v'; found %v", [label, node_metadata.labels]),
        "violating_key": "metadata.labels"
      }
    }

    node_metadata = input.review.object.metadata {
      contains_kind(input.review.object.kind, {"Node"})
    }

    contains_kind(kind, kinds) {
      kinds[_] = kind
    }
