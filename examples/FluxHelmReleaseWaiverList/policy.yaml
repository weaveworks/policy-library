apiVersion: pac.weave.works/v2beta2
kind: Policy
metadata:
  name: weave.policies.helm-release-suspend-waiver
spec:
  id: weave.policies.helm-release-suspend-waiver
  name: Helm Release Suspend Waiver
  enabled: true
  description: "HelmRelease cannot be suspended unless it's on the waiver list."
  how_to_solve: "Add the HelmRelease to the waiver list or set 'suspend' to false."
  category: weave.categories.security
  severity: high
  targets: {kinds: [HelmRelease]}
  tags: [flux]
  parameters:
    - name: exclude_namespaces
      type: array
      required: false
      value: []
    - name: exclude_label_key
      type: string
      required: false
      value:
    - name: exclude_label_value
      type: string
      required: false
      value:
    - name: waiver_list
      type: array
      required: true
      value: []
  code: |
    package helm_release_suspended_waiver

    import future.keywords.in

    exclude_namespaces := input.parameters.exclude_namespaces
    exclude_label_key := input.parameters.exclude_label_key
    exclude_label_value := input.parameters.exclude_label_value
    waiver_list := input.parameters.waiver_list

    violation[result] {
        not isExcludedNamespace
        not controller_input.metadata.name in waiver_list
        controller_input.spec.suspend == true
        result = {
            "issue detected": true,
            "msg": sprintf("The HelmRelease '%s' cannot be suspended unless it's on the waiver list.", [controller_input.metadata.name]),
            "violating_key": "spec.suspend"
        }
    }

    # Controller input
    controller_input = input.review.object

    contains_kind(kind, kinds) {
      kinds[_] = kind
    }

    isExcludedNamespace {
        controller_input.metadata.namespace
        controller_input.metadata.namespace in exclude_namespaces
    }
