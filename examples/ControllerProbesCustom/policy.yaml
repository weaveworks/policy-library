apiVersion: magalix.com/v1
kind: Policy
metadata:
  name: magalix.policies.container-custom-probe
spec:
  name: magalix.policies.container-custom-probe
  description: |
    This Policy allows defining the various container probes, and ensures consistent probes are configured across all containers. You can set the type of probe `livenessProbe`, `readinessProbe`, `startupProbe` along with a `command`, a `path` and a `port`. 
  how_to_solve: |
    ```
    ...
      spec:
        containers:
        - container1
          <probe_type>:
            exec:
              command: 
              - <command>
        - container2
          <probe_type>:
            httpGet:
              path: <path>
              port: <port>
    ```
    https://kubernetes.io/docs/tasks/configure-pod-container/configure-liveness-readiness-startup-probes/#define-a-tcp-liveness-probe
  category: magalix.categories.reliability
  severity: high
  parameters:
  - name: probe_type
    type: string
    required: true
    default:
  - name: command
    type: array
    required: false
    default:
  - name: path
    type: string
    required: false
    default:
  - name: port
    type: integer
    required: false
    default:
  - name: exclude_namespace
    type: string
    required: false
    default:
  - name: exclude_label_key
    type: string
    required: false
    default:
  - name: exclude_label_value
    type: string
    required: false
    default:
  code: "package magalix.advisor.observability.custom_probes\n\nprobe_type := input.parameters.probe_type\n\
    command := input.parameters.command\npath := input.parameters.path\nport := input.parameters.port\
    \ \nexclude_namespace := input.parameters.exclude_namespace\nexclude_label_key\
    \ := input.parameters.exclude_label_key\nexclude_label_value := input.parameters.exclude_label_value\n\
    \n# Use this if you are using exec\nviolation[result] {\n  not exclude_namespace\
    \ == controller_input.metadata.namespace\n  not exclude_label_value == controller_input.metadata.labels[exclude_label_key]\n\
    \  some i\n  containers := controller_spec.containers[i]\n  probe_command := containers[probe_type].exec.command\n\
    \  not (probe_command == command)\n  result = {\n\t\"issue_detected\": true,\n\
    \    \"msg\": sprintf(\"Expecting commands '%v'; found '%v'\", [command, probe_command]),\n\
    \    \"violating_key\": sprintf(\"spec.template.spec.containers[%v][probe_type].exec.command\"\
    , [i]),\n    \"recommended_value\": command\n\t}\n}\n\n# Use this if you are using\
    \ httpGet\nviolation[result] {\n  not exclude_namespace == controller_input.metadata.namespace\n\
    \  not exclude_label_value == controller_input.metadata.labels[exclude_label_key]\n\
    \  some i\n  containers := controller_spec.containers[i]\n  probe_path := containers[probe_type].httpGet.path\n\
    \  not path == probe_path\n  result = {\n\t\"issue_detected\": true,\n    \"msg\"\
    : sprintf(\"Expecting httpGet path '%v'; found '%v'\", [path, probe_path]),\n\
    \    \"violating_key\": sprintf(\"spec.template.spec.containers[%v][probe_type].httpGet.path\"\
    , [i]),\n     \"recommended_value\": path\n\t}\n}\n\n# Use this if you are using\
    \ tcpSocket without a named port\nviolation[result] {\n  some i\n  containers\
    \ := controller_spec.containers[i]\n  probe_port := containers[probe_type].tcpSocket.port\n\
    \  not port ==  probe_port\n  result = {\n\t\"issue_detected\": true,\n    \"\
    msg\": sprintf(\"Expecting port '%v'; found '%v'\", [port, probe_port]),   \n\
    \    \"violating_key\": sprintf(\"spec.template.spec.containers[%v][probe_type].tcpSocket.port\"\
    , [i]),\n     \"recommended_value\": port\n\t}\n}\n\n# Controller input\ncontroller_input\
    \ = input.review.object\n\n# controller_container acts as an iterator to get containers\
    \ from the template\ncontroller_spec = controller_input.spec.template.spec {\n\
    \  contains_kind(controller_input.kind, {\"StatefulSet\" , \"DaemonSet\", \"Deployment\"\
    , \"Job\"})\n} else = controller_input.spec {\n  controller_input.kind == \"Pod\"\
    \n} else = controller_input.spec.jobTemplate.spec.template.spec {\n  controller_input.kind\
    \ == \"CronJob\"\n}\n\ncontains_kind(kind, kinds) {\n  kinds[_] = kind\n}"
