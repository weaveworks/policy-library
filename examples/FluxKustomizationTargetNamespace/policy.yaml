apiVersion: pac.weave.works/v2beta2
kind: Policy
metadata:
  name: weave.policies.kustomization-target-namespace
spec:
  id: weave.policies.kustomization-target-namespace
  name: Kustomization Target Namespace
  enabled: true
  description: "Kustomization targetNamespace must be one of the allowed targetNamespace list."
  how_to_solve: "Set the targetNamespace of the Kustomization to one of the allowed namespaces."
  category: weave.categories.best-practices
  severity: medium
  targets:
    kinds: [Kustomization]
  tags: [flux]
  parameters:
    - name: target_namespaces
      type: array
      required: true
      value:
    - name: exclude_namespaces
      type: array
      required: false
      value:
    - name: exclude_label_key
      type: string
      required: false
      value: ""
    - name: exclude_label_value
      type: string
      required: false
      value: ""
  code: |
    package weave.advisor.kustomization_target_namespace

    import future.keywords.in

    exclude_namespaces := input.parameters.exclude_namespaces
    exclude_label_key := input.parameters.exclude_label_key
    exclude_label_value := input.parameters.exclude_label_value
    target_namespaces := input.parameters.target_namespaces

    violation[result] {
        isExcludedNamespace == false
        not exclude_label_value == kustomization_input.metadata.labels[exclude_label_key]
        not kustomization_input.spec.targetNamespace in target_namespaces
        target_namespace_list := concat(", ", target_namespaces)
        result = {
            "issue_detected": true,
            "msg": sprintf("The Kustomization '%s' targetNamespace must be one of the allowed target namespaces: %v; found '%s'", [kustomization_input.metadata.name, target_namespace_list, kustomization_input.spec.targetNamespace]),
            "violating_key": "spec.targetNamespace"
        }
    }

    # Kustomization input
    kustomization_input = input.review.object {
      input.review.object.kind == "Kustomization"
    }

    contains_kind(kind, kinds) {
      kinds[_] = kind
    }

    isExcludedNamespace = true {
      kustomization_input.metadata.namespace
      kustomization_input.metadata.namespace in exclude_namespaces
    } else = false
