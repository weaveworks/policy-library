apiVersion: pac.weave.works/v2beta2
kind: Policy
metadata:
  name: weave.templates.enforce-specific-ingress-class
spec:
  id: weave.templates.enforce-specific-ingress-class
  name: Enforce Specific Ingress Class
  description: "This Policy allows for a custom Ingress annotation key and value. When using Kubernetes Ingress, various annotation can be used to define different configurations, even different ingress controllers. Values may vary depending on your use case. \n"
  how_to_solve: |
    ```
    metadata:
      annotations:
        kubernetes.io/ingress.class: <class>
    ```
    https://kubernetes.io/docs/concepts/services-networking/ingress/
  category: weave.categories.network-security
  severity: medium
  standards:
    - id: weave.standards.pci-dss
      controls:
        - weave.controls.pci-dss.1.1.4
  parameters:
    - name: class
      type: string
      required: true
      value:
    - name: annotation
      type: string
      required: true
      value:
    - name: exclude_namespaces
      type: array
      required: false
      value:
    - name: exclude_label_key
      type: string
      required: false
      value:
    - name: exclude_label_value
      type: string
      required: false
      value:
  code: "package weave.advisor.ingress.ingress_class\n\nimport future.keywords.in\n\nannotation  := input.parameters.annotation\nclass := input.parameters.class\nexclude_namespaces := input.parameters.exclude_namespaces\nexclude_label_key := input.parameters.exclude_label_key\nexclude_label_value := input.parameters.exclude_label_value\n\nviolation[result] {\n  isExcludedNamespace == false\n  not exclude_label_value == controller_input.metadata.labels[exclude_label_key]\n  ingress_annotation := controller_input.metadata.annotations\n  not has_key(ingress_annotation, annotation)\n  result = {\n    \"issue_detected\": true,\n    \"msg\": sprintf(\"Ingress is missing the annoation '%v'\", [annotation]),\n    \"violating_key\": \"metadata.annotations\"\n  }\n}\n\nviolation[result] {\n  isExcludedNamespace == false\n  not exclude_label_value == controller_input.metadata.labels[exclude_label_key]\n  ingress_class:= controller_input.metadata.annotations[annotation]\n  not ingress_class == class\n  result = {\n    \"issue_detected\": true,\n    \"msg\": sprintf(\"Ingress class should '%v'; found '%v' \", [class, ingress_class]),\n    \"violating_key\": \"metadata.annotations\",\n    \"recommended_value\": class\n    \n  }\n}\n\nhas_key(x, k) { \n  type_name(x[k])\n}\n\ncontroller_input = input.review.object {\n\tcontains_kind(input.review.object.kind, {\"Ingress\"})\n}\n\ncontains_kind(kind, kinds) {\n  kinds[_] = kind\n}\n\nisExcludedNamespace = true {\n\tcontroller_input.metadata.namespace\n\tcontroller_input.metadata.namespace in exclude_namespaces\n} else = false\n"
