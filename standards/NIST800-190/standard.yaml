controls:
- description: An image should only include the executables and libraries required
    by the app itself; all other OS functionality is provided by the OS kernel within
    the underlying host OS.
  id: weave.controls.nist-800-190.2.3.1
  name: Image Creation - Testing - Accreditation
  order: 2.3.1
- description: Images are typically stored in central locations to make it easy to
    control, share, find, and reuse them across hosts.
  id: weave.controls.nist-800-190.2.3.2
  name: Image Storage and Retrieval
  order: 2.3.2
- description: Tools known as orchestrators enable DevOps personas or automation working
    on their behalf to pull images from registries, deploy  those images into containers,
    and manage the running containers. This deployment process is what actually results
    in a usable version of the app, running and ready to respond to requests. When
    an image is deployed into a container, the image itself is not changed, but instead
    a copy of it is placed within the container and transitioned from being a dormant
    set of app code to a running instance of the app.
  id: weave.controls.nist-800-190.2.3.3
  name: Container Deployment and Management
  order: 2.3.3
- description: Because images are effectively static archive files that include all
    the components used to run a given app, components within an image may be missing
    critical security updates or are otherwise outdated. An image created with fully
    up-to-date components may be free of known vulnerabilities for days or weeks after
    its creation, but at some time vulnerabilities will be discovered in one or more
    image components, and thus the image will no longer be up-to-date.
  id: weave.controls.nist-800-190.3.1.1
  name: Image vulnerabilities
  order: 3.1.1
- description: "In addition to software defects, images may also have configuration\
    \ defects. For example, an image may not be configured with a specific user account\
    \ to \u201Crun as\u201D and thus run with greater privileges than needed. As another\
    \ example, an image may include an SSH daemon, which exposes the container to\
    \ unnecessary network risk. Much like in a traditional server or VM, where a poor\
    \ configuration can still expose a fully up-to-date system to attack, so too can\
    \ a poorly configured image increase risk even if all the included components\
    \ are up-to-date."
  id: weave.controls.nist-800-190.3.1.2
  name: Image configuration defects
  order: 3.1.2
- description: Because images are just collections of files packaged together, malicious
    files could be included intentionally or inadvertently within them. Such malware
    would have the same capabilities as any other component within the image and thus
    could be used to attack other containers or hosts within the environment. A possible
    source of embedded malware is the use of base layers and other images provided
    by third parties of which the full provenance is not known.
  id: weave.controls.nist-800-190.3.1.3
  name: Embedded malware
  order: 3.1.3
- description: Many apps require secrets to enable secure communication between components.
    For example, a web app may need a username and password to connect to a backend
    database. Other examples of embedded secrets include connection strings, SSH private
    keys, and X.509 private keys. When an app is packaged into an image, these secrets
    can be embedded directly into the image file system. However, this practice creates
    a security risk because anyone with access to the image can easily parse it to
    learn these secrets.
  id: weave.controls.nist-800-190.3.1.4
  name: Embedded clear text secrets
  order: 3.1.4
- description: One of the most common high-risk scenarios in any environment is the
    execution of untrusted software. The portability and ease of reuse of containers
    increase the temptation for teams to run images from external sources that may
    not be well validated or trustworthy. For example, when troubleshooting a problem
    with a web app, a user may find another version of that app available in an image
    provided by a third party. Using this externally provided image results in the
    same types of risks that external software traditionally has, such as introducing
    malware, leaking data, or including components with vulnerabilities.
  id: weave.controls.nist-800-190.3.1.5
  name: Use of untrusted images
  order: 3.1.5
- description: "Images often contain sensitive components like an organization\u2019\
    s proprietary software and embedded secrets. If connections to registries are\
    \ performed over insecure channels, the contents of images are subject to the\
    \ same confidentiality risks as any other data transmitted in the clear. There\
    \ is also an increased risk of man-in-the-middle attacks that could intercept\
    \ network traffic intended for registries and steal developer or administrator\
    \ credentials within that traffic, provide fraudulent or outdated images to orchestrators,\
    \ etc."
  id: weave.controls.nist-800-190.3.2.1
  name: Insecure connections to registries
  order: 3.2.1
- description: Because registries are typically the source location for all the images
    an organization deploys, over time the set of images they store can include many
    vulnerable, out-of-date versions. While these vulnerable images do not directly
    pose a threat simply by being stored in the registry, they increase the likelihood
    of accidental deployment of a known-vulnerable version.
  id: weave.controls.nist-800-190.3.2.2
  name: Stale images in registries
  order: 3.2.2
- description: Because registries may contain images used to run sensitive or proprietary
    apps and to access sensitive data, insufficient authentication and authorization
    requirements can lead to intellectual property loss and expose significant technical
    details about an app to an attacker. Even more critically, because registries
    are typically trusted as a source of valid, approved software, compromise of a
    registry can potentially lead to compromise of downstream containers and hosts.
  id: weave.controls.nist-800-190.3.2.3
  name: Insufficient authentication and authorization restrictions
  order: 3.2.3
- description: Historically, many orchestrators were designed with the assumption
    that all users interacting with them would be administrators and those administrators
    should have environment-wide control. However, in many cases, a single orchestrator
    may run many different apps, each managed by different teams, and with different
    sensitivity levels. If the access provided to users and groups is not scoped to
    their specific needs, a malicious or careless user could affect or subvert the
    operation of other containers managed by the orchestrator.
  id: weave.controls.nist-800-190.3.3.1
  name: Unbounded administrative access
  order: 3.3.1
- description: Because a container may run on any given node within a cluster, the
    data required by the app within the container must be available to the container
    regardless of which host it is running on. At the same time, many organizations
    manage data that must be encrypted at rest to prevent unauthorized access.
  id: weave.controls.nist-800-190.3.3.2
  name: Unauthorized access
  order: 3.3.2
- description: "In most containerized environments, traffic between individual nodes\
    \ is routed over a virtual overlay network. This overlay network is typically\
    \ managed by the orchestrator and is often opaque to existing network security\
    \ and management tools. For example, instead of seeing database queries being\
    \ sent from a web server container to a database container on another host, traditional\
    \ network filters would only see encrypted packets flowing between two hosts,\
    \ with no visibility into the actual container endpoints, nor the traffic being\
    \ sent. Although an encrypted overlay network provides many operational and security\
    \ benefits, it can also create a security \u2018blindness\u2019 scenario in which\
    \ organizations are unable to effectively monitor traffic within their own networks."
  id: weave.controls.nist-800-190.3.3.3
  name: Poorly separated inter-container network traffic
  order: 3.3.3
- description: Orchestrators are typically focused primarily on driving the scale
    and density of workloads. This means that, by default, they can place workloads
    of differing sensitivity levels on the same host. For example, in a default configuration,
    an orchestrator may place a container running a public-facing web server on the
    same host as one processing sensitive financial data, simply because that host
    happens to have the most available resources at the time of deployment. In the
    case of a critical vulnerability in the web server, this can put the container
    processing sensitive financial data at significantly greater risk of compromise.
  id: weave.controls.nist-800-190.3.3.4
  name: Mixing of workload sensitivity levels
  order: 3.3.4
- description: "Maintenance of trust between the nodes in the environment requires\
    \ special care. The orchestrator is the most foundational node.  Weak orchestrator\
    \ configurations can expose the orchestrator and all other container technology\
    \ components to increased risk. Examples of possible consequences include\n* Unauthorized\
    \ hosts joining the cluster and running containers\n* The compromise of a single\
    \ cluster host implying compromise of the entire cluster\u2014for example, if\
    \ the same key pairs used for authentication are shared across all nodes\n* Communications\
    \ between the orchestrator and DevOps personnel, administrators, and hosts being\
    \ unencrypted and unauthenticated\n"
  id: weave.controls.nist-800-190.3.3.5
  name: Orchestrator node trust
  order: 3.3.5
- description: "While relatively uncommon, vulnerabilities within the runtime software\
    \ are particularly dangerous if they allow \u2018container escape\u2019 scenarios\
    \ in which malicious software can attack resources in other containers and the\
    \ host OS itself. An attacker may also be able to exploit vulnerabilities to compromise\
    \ the runtime software itself, and then alter that software so it allows the attacker\
    \ to access other containers, monitor container-to-container communications, etc."
  id: weave.controls.nist-800-190.3.4.1
  name: Vulnerabilities within the runtime software
  order: 3.4.1
- description: "By default in most container runtimes, individual containers are able\
    \ to access each other and the host OS over the network. If a container is compromised\
    \ and acting maliciously, allowing this network traffic may expose other resources\
    \ in the environment to risk. For example, a compromised container may be used\
    \ to scan the network it is connected to in order to find other weaknesses for\
    \ an attacker to exploit. This risk is related to that from poorly separated virtual\
    \ networks, as discussed in Section 3.3.3, but different because it is focused\
    \ more on flows from containers to any outbound destination, not on app \u201C\
    cross talk\u201D scenarios.\n\nEgress network access is more complex to manage\
    \ in a containerized environment because so much of the connection is virtualized\
    \ between containers. Thus, traffic from one container to another may appear simply\
    \ as encapsulated packets on the network without directly indicating the ultimate\
    \ source, destination, or payload. Tools and operational processes that are not\
    \ container aware are not able to inspect this traffic or determine whether it\
    \ represents a threat.\n"
  id: weave.controls.nist-800-190.3.4.2
  name: Unbounded network access from containers
  order: 3.4.2
- description: 'Container runtimes typically expose many configurable options to administrators.
    Setting them improperly can lower the relative security of the system. For example,
    on Linux container hosts, the set of allowed system calls is often limited by
    default to only those required for safe operation of containers. If this list
    is widened, it may expose containers and the host OS to increased risk from a
    compromised container. Similarly, if a container is run in privileged mode, it
    has access to all the devices on the host, thus allowing it to essentially act
    as part of the host OS and impact all other containers running on it.


    Another example of an insecure runtime configuration is allowing containers to
    mount sensitive directories on the host. Containers should rarely make changes
    to the host OS file system and should almost never make changes to locations that
    control the basic functionality of the host OS (e.g., /boot or /etc for Linux
    containers, C:\Windows for Windows containers). If a compromised container is
    allowed to make changes to these paths, it could be used to elevate privileges
    and attack the host itself as well as other containers running on the host.

    '
  id: weave.controls.nist-800-190.3.4.3
  name: Insecure container runtime configurations
  order: 3.4.3
- description: Even when organizations are taking the precautions recommended in this
    guide, containers may still be compromised due to flaws in the apps they run.
    This is not a problem with containers themselves, but instead is just the manifestation
    of typical software flaws within a container environment. For example, a containerized
    web app may be vulnerable to cross-site scripting vulnerabilities, and a database
    front end container may be subject to Structured Query Language (SQL) injection.
    When a container is compromised, it can be misused in many ways, such as granting
    unauthorized access to sensitive information or enabling attacks against other
    containers or the host OS.
  id: weave.controls.nist-800-190.3.4.4
  name: App vulnerabilities
  order: 3.4.4
- description: Rogue containers are unplanned or unsanctioned containers in an environment.
    This can be a common occurrence, especially in development environments, where
    app developers may launch containers as a means of testing their code. If these
    containers are not put through the rigors of vulnerability scanning and proper
    configuration, they may be more susceptible to exploits. Rogue containers therefore
    pose additional risk to the organization, especially when they persist in the
    environment without the awareness of development teams and security administrators.
  id: weave.controls.nist-800-190.3.4.5
  name: Rogue containers
  order: 3.4.5
- description: "Every host OS has an attack surface, which is the collection of all\
    \ ways attackers can attempt to access and exploit the host OS\u2019s vulnerabilities.\
    \ For example, any network-accessible service provides a potential entry point\
    \ for attackers, adding to the attack surface. The larger the attack surface is,\
    \ the better the odds are that an attacker can find and access a vulnerability,\
    \ leading to a compromise of the host OS and the containers running on top of\
    \ it."
  id: weave.controls.nist-800-190.3.5.1
  name: Large attack surface
  order: 3.5.1
- description: Container-specific OSs have a much smaller attack surface than that
    of general-purpose OSs. For example, they do not contain libraries and package
    managers that enable a general-purpose OS to directly run database and web server
    apps. However, although containers provide strong software-level isolation of
    resources, the use of a shared kernel invariably results in a larger inter-object
    attack surface than seen with hypervisors, even for container-specific OSs. In
    other words, the level of isolation provided by container runtimes is not as high
    as that provided by hypervisors.
  id: weave.controls.nist-800-190.3.5.2
  name: Shared kernel
  order: 3.5.2
- description: "All host OSs, even container-specific ones, provide foundational system\
    \ components\u2014for example, the cryptographic libraries used to authenticate\
    \ remote connections and the kernel primitives used for general process invocation\
    \ and management. Like any other software, these components can have vulnerabilities\
    \ and, because they exist low in the container technology architecture, they can\
    \ impact all the containers and apps that run on these hosts."
  id: weave.controls.nist-800-190.3.5.3
  name: Host OS component vulnerabilities
  order: 3.5.3
- description: "Container-specific OSs are typically not optimized to support multiuser\
    \ scenarios since interactive user logon should be rare. Organizations are exposed\
    \ to risk when users log on directly to hosts to manage containers, rather than\
    \ going through an orchestration layer. Direct management enables wide-ranging\
    \ changes to the system and all containers on it, and can potentially enable a\
    \ user that only needs to manage a specific app\u2019s containers to impact many\
    \ others."
  id: weave.controls.nist-800-190.3.5.4
  name: Improper user access rights
  order: 3.5.4
- description: Insecure container configurations can expose host volumes to greater
    risk of file tampering. For example, if a container is allowed to mount sensitive
    directories on the host OS, that container can then change files in those directories.
    These changes could impact the stability and security of the host and all other
    containers running on it.
  id: weave.controls.nist-800-190.3.5.5
  name: Host OS file system tampering
  order: 3.5.5
- description: "Organizations should use tools that take the pipeline-based build\
    \ approach and immutable nature of containers and images into their design to\
    \ provide more actionable and reliable results. Key aspects of effective tools\
    \ and processes include:\n1. Integration with the entire lifecycle of images,\
    \ from the beginning of the build process, to whatever registries the organization\
    \ is using, to runtime.\n2. Visibility into vulnerabilities at all layers of the\
    \ image, not just the base layer of the image but also application frameworks\
    \ and custom software the organization is using. Visibility should be centralized\
    \ across the organization and provide flexible reporting and monitoring views\
    \ aligned with organizations\u2019 business processes.\n3. Policy-driven enforcement;\
    \ organizations should be able to create \u201Cquality gates\u201D at each stage\
    \ of the build and deployment process to ensure that only images that meet the\
    \ organization\u2019s vulnerability and configuration policies are allowed to\
    \ progress. For example, organizations should be able to configure a rule in the\
    \ build process to prevent the progression of images that include vulnerabilities\
    \ with Common Vulnerability Scoring System (CVSS) [18] ratings above a selected\
    \ threshold.\n"
  id: weave.controls.nist-800-190.4.1.1
  name: Image vulnerabilities
  order: 4.1.1
- description: Organizations should adopt tools and processes to validate and enforce
    compliance with secure configuration best practices. A final recommendation for
    image configuration is that SSH and other remote administration tools designed
    to provide remote shells to hosts should never be enabled within containers. Containers
    should be run in an immutable manner to derive the greatest security benefit from
    their use.
  id: weave.controls.nist-800-190.4.1.2
  name: Image configuration defects
  order: 4.1.2
- description: "Organizations should continuously monitor all images for embedded\
    \ malware. The monitoring processes should include the use of malware signature\
    \ sets and behavioral detection heuristics based largely on actual \u201Cin the\
    \ wild\u201D attacks."
  id: weave.controls.nist-800-190.4.1.3
  name: Embedded malware
  order: 4.1.3
- description: Regardless of the tool chosen, organizations should ensure that secrets
    are only provided to the specific containers that require them, based on a pre-defined
    and administrator-controlled setting, and that secrets are always encrypted at
    rest and in transit using Federal Information Processing Standard (FIPS) 140 approved
    cryptographic algorithms5 contained in validated cryptographic modules.
  id: weave.controls.nist-800-190.4.1.4
  name: Embedded clear text secrets
  order: 4.1.4
- description: Organizations should maintain a set of trusted images and registries
    and ensure that only images from this set are allowed to run in their environment,
    thus mitigating the risk of untrusted or malicious components being deployed.
  id: weave.controls.nist-800-190.4.1.5
  name: Use of untrusted images
  order: 4.1.5
- description: Organizations should configure their development tools, orchestrators,
    and container runtimes to only connect to registries over encrypted channels.
    The specific steps vary between tools, but the key goal is to ensure that all
    data pushed to and pulled from a registry occurs between trusted endpoints and
    is encrypted in transit.
  id: weave.controls.nist-800-190.4.2.1
  name: Insecure connections to registries
  order: 4.2.1
- description: "The risk of using stale images can be mitigated through two primary\
    \ methods. First, organizations can prune registries of unsafe, vulnerable images\
    \ that should no longer be used. This process can be automated based on time triggers\
    \ and labels associated with images. Second, operational practices should emphasize\
    \ accessing images using immutable names that specify discrete versions of images\
    \ to be used.\n\nRegardless of whether an organization chooses to use discrete\
    \ names or to use a \u201Clatest\u201D tag, it is critical that processes be put\
    \ in place to ensure that either the automation is using the most recent unique\
    \ name or the images tagged \u201Clatest\u201D actually do represent the most\
    \ up-to-date versions.\n"
  id: weave.controls.nist-800-190.4.2.2
  name: Stale images in registries
  order: 4.2.2
- description: All access to registries that contain proprietary or sensitive images
    should require authentication.
  id: weave.controls.nist-800-190.4.2.3
  name: Insufficient authentication and authorization restrictions
  order: 4.2.3
- description: Especially because of their wide-ranging span of control, orchestrators
    should use a least privilege access model in which users are only granted the
    ability to perform the specific actions on the specific hosts, containers, and
    images their job roles require. For example, members of the test team should only
    be given access to the images used in testing and the hosts used for running them,
    and should only be able to manipulate the containers they created. Test team members
    should have limited or no access to containers used in production.
  id: weave.controls.nist-800-190.4.3.1
  name: Unbounded administrative access
  order: 4.3.1
- description: Traditional approaches for data at rest encryption often involve the
    use of host-based capabilities that may be incompatible with containers. Thus,
    organizations should use tools for encrypting data used with containers that allow
    the data to be accessed properly from containers regardless of the node they are
    running on. Such encryption tools should provide the same barriers to unauthorized
    access and tampering, using the same cryptographic approaches as those defined
    in NIST SP 800-111 [19].
  id: weave.controls.nist-800-190.4.3.2
  name: Unauthorized access
  order: 4.3.2
- description: Orchestrators should be configured to separate network traffic into
    discrete virtual networks by sensitivity level. While per-app segmentation is
    also possible, for most organizations and use cases, simply defining networks
    by sensitivity level provides sufficient mitigation of risk with a manageable
    degree of complexity. For example, public-facing apps can share a virtual network,
    internal apps can use another, and communication between the two should occur
    through a small number of well-defined interfaces.
  id: weave.controls.nist-800-190.4.3.3
  name: Poorly separated inter-container network traffic
  order: 4.3.3
- description: "Orchestrators should be configured to isolate deployments to specific\
    \ sets of hosts by sensitivity levels. The particular approach for implementing\
    \ this varies depending on the orchestrator in use, but the general model is to\
    \ define rules that prevent high sensitivity workloads from being placed on the\
    \ same host as those running lower sensitivity workloads. This can be accomplished\
    \ through the use of host \u2018pinning\u2019 within the orchestrator or even\
    \ simply by having separate, individually managed clusters for each sensitivity\
    \ level."
  id: weave.controls.nist-800-190.4.3.4
  name: Mixing of workload sensitivity levels
  order: 4.3.4
- description: Orchestration platforms should be configured to provide features that
    create a secure environment for all the apps they run. Orchestrators should ensure
    that nodes are securely introduced to the cluster, have a persistent identity
    throughout their lifecycle, and can also provide an accurate inventory of nodes
    and their connectivity states. Organizations should ensure that orchestration
    platforms are designed specifically to be resilient to compromise of individual
    nodes without compromising the overall security of the cluster. A compromised
    node must be able to be isolated and removed from the cluster without disrupting
    or degrading overall cluster operations. Finally, organizations should choose
    orchestrators that provide mutually authenticated network connections between
    cluster members and end-to-end encryption of intra-cluster traffic. Because of
    the portability of containers, many deployments may occur across networks organizations
    do not directly control, so a secure-by-default posture is particularly important
    for this scenario.
  id: weave.controls.nist-800-190.4.3.5
  name: Orchestrator node trust
  order: 4.3.5
- description: The container runtime must be carefully monitored for vulnerabilities,
    and when problems are detected, they must be remediated quickly. A vulnerable
    runtime exposes all containers it supports, as well as the host itself, to potentially
    significant risk. Organizations should use tools to look for Common Vulnerabilities
    and Exposures (CVEs) vulnerabilities in the runtimes deployed, to upgrade any
    instances at risk, and to ensure that orchestrators only allow deployments to
    properly maintained runtimes.
  id: weave.controls.nist-800-190.4.4.1
  name: Vulnerabilities within the runtime software
  order: 4.4.1
- description: Organizations should control the egress network traffic sent by containers.
    At minimum, these controls should be in place at network borders, ensuring containers
    are not able to send traffic across networks of differing sensitivity levels,
    such as from an environment hosting secure data to the internet, similar to the
    patterns used for traditional architectures.
  id: weave.controls.nist-800-190.4.4.2
  name: Unbounded network access from containers
  order: 4.4.2
- description: "Organizations should automate compliance with container runtime configuration\
    \ standards. Documented technical implementation guidance, such as the Center\
    \ for Internet Security Docker Benchmark [20], provides details on options and\
    \ recommended settings, but operationalizing this guidance depends on automation.\
    \ Organizations can use a variety of tools to \u201Cscan\u201D and assess their\
    \ compliance at a point in time, but such approaches do not scale. Instead, organizations\
    \ should use tools or processes that continuously assess configuration settings\
    \ across the environment and actively enforce them.\n\nAdditionally, mandatory\
    \ access control (MAC) technologies like SELinux [21] and AppArmor [22] provide\
    \ enhanced control and isolation for containers running Linux OSs.\n\nSecure computing\
    \ (seccomp)7 profiles are another mechanism that can be used to constrain the\
    \ system-level capabilities containers are allocated at runtime. Common container\
    \ runtimes like Docker include default seccomp profiles that drop system calls\
    \ that are unsafe and typically unnecessary for container operation. Additionally,\
    \ custom profiles can be created and passed to container runtimes to further limit\
    \ their capabilities. At a minimum, organizations should ensure that containers\
    \ are run with the default profiles provided by their runtime and should consider\
    \ using additional profiles for high-risk apps.\n"
  id: weave.controls.nist-800-190.4.4.3
  name: Insecure container runtime configurations
  order: 4.4.3
- description: Containers should be run with their root filesystems in read-only mode.
    This approach isolates writes to specifically defined directories, which can then
    be more easily monitored by the aforementioned tools. Furthermore, using read-only
    filesystems makes the containers more resilient to compromise since any tampering
    is isolated to these specific locations and can be easily separated from the rest
    of the app.
  id: weave.controls.nist-800-190.4.4.4
  name: App vulnerabilities
  order: 4.4.4
- description: Organizations should institute separate environments for development,
    test, production, and other scenarios, each with specific controls to provide
    role-based access control for container deployment and management activities.
    All container creation should be associated with individual user identities and
    logged to provide a clear audit trail of activity. Further, organizations are
    encouraged to use security tools that can enforce baseline requirements for vulnerability
    management and compliance prior to allowing an image to be run.
  id: weave.controls.nist-800-190.4.4.5
  name: Rogue containers
  order: 4.4.5
- description: For organizations using container-specific OSs, the threats are typically
    more minimal to start with since the OSs are specifically designed to host containers
    and have other services and functionality disabled. Further, because these optimized
    OSs are designed specifically for hosting containers, they typically feature read-only
    file systems and employ other hardening practices by default. Whenever possible,
    organizations should use these minimalistic OSs to reduce their attack surfaces
    and mitigate the typical risks and hardening activities associated with general-purpose
    OSs.
  id: weave.controls.nist-800-190.4.5.1
  name: Large attack surface
  order: 4.5.1
- description: In addition to grouping container workloads onto hosts by sensitivity
    level, organizations should not mix containerized and non-containerized workloads
    on the same host instance. For example, if a host is running a web server container,
    it should not also run a web server (or any other app) as a regularly installed
    component directly within the host OS. Keeping containerized workloads isolated
    to container-specific hosts makes it simpler and safer to apply countermeasures
    and defenses that are optimized for protecting containers.
  id: weave.controls.nist-800-190.4.5.2
  name: Shared kernel
  order: 4.5.2
- description: Host OSs should be operated in an immutable manner with no data or
    state stored uniquely and persistently on the host and no application-level dependencies
    provided by the host. Instead, all app components and dependencies should be packaged
    and deployed in containers. This enables the host to be operated in a nearly stateless
    manner with a greatly reduced attack surface. Additionally, it provides a more
    trustworthy way to identify anomalies and configuration drift.
  id: weave.controls.nist-800-190.4.5.3
  name: Host OS component vulnerabilities
  order: 4.5.3
- description: Though most container deployments rely on orchestrators to distribute
    jobs across hosts, organizations should still ensure that all authentication to
    the OS is audited, login anomalies are monitored, and any escalation to perform
    privileged operations is logged. This makes it possible to identify anomalous
    access patterns such as an individual logging on to a host directly and running
    privileged commands to manipulate containers.
  id: weave.controls.nist-800-190.4.5.4
  name: Improper user access rights
  order: 4.5.4
- description: "Ensure that containers are run with the minimal set of file system\
    \ permissions required. Very rarely should containers mount local file systems\
    \ on a host. Instead, any file changes that containers need to persist to disk\
    \ should be made within storage volumes specifically allocated for this purpose.\
    \ In no case should containers be able to mount sensitive directories on a host\u2019\
    s file system, especially those containing configuration settings for the operating\
    \ system. Organizations should use tools that can monitor what directories are\
    \ being mounted by containers and prevent the deployment of containers that violate\
    \ these policies."
  id: weave.controls.nist-800-190.4.5.5
  name: Host file system tampering
  order: 4.5.5
description: Application Container Security Guide SP 800-190 https://csrc.nist.gov/publications/detail/sp/800-190/final
id: weave.standards.nist-800-190
name: NIST 800-190
enabled: false
